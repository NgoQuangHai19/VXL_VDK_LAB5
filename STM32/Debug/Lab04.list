
Lab04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003404  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003510  08003510  00013510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003588  08003588  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003588  08003588  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003588  08003588  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003588  08003588  00013588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800358c  0800358c  0001358c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000074  08003604  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08003604  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e77  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b78  00000000  00000000  00029f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  0002ba90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000760  00000000  00000000  0002c2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e8a  00000000  00000000  0002ca08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f6a  00000000  00000000  00042892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000833c7  00000000  00000000  0004c7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cfbc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000232c  00000000  00000000  000cfc18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080034f8 	.word	0x080034f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080034f8 	.word	0x080034f8

0800014c <command_parser_fsm1>:
// init state for fsm command_parser_fsm2
uint8_t end_state = INIT;
// init state for fsm uart_communiation_fsm
uint8_t status_communication = INIT;
//Check !RST# message
void command_parser_fsm1(){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	uint8_t index = index_buffer;
 8000152:	4b64      	ldr	r3, [pc, #400]	; (80002e4 <command_parser_fsm1+0x198>)
 8000154:	781b      	ldrb	r3, [r3, #0]
 8000156:	71fb      	strb	r3, [r7, #7]
	if(index_buffer == 0) index = MAX_BUFFER_SIZE - 1;
 8000158:	4b62      	ldr	r3, [pc, #392]	; (80002e4 <command_parser_fsm1+0x198>)
 800015a:	781b      	ldrb	r3, [r3, #0]
 800015c:	2b00      	cmp	r3, #0
 800015e:	d101      	bne.n	8000164 <command_parser_fsm1+0x18>
 8000160:	231d      	movs	r3, #29
 8000162:	71fb      	strb	r3, [r7, #7]
	if(index_buffer != 0) index = index_buffer - 1;
 8000164:	4b5f      	ldr	r3, [pc, #380]	; (80002e4 <command_parser_fsm1+0x198>)
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	2b00      	cmp	r3, #0
 800016a:	d003      	beq.n	8000174 <command_parser_fsm1+0x28>
 800016c:	4b5d      	ldr	r3, [pc, #372]	; (80002e4 <command_parser_fsm1+0x198>)
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	3b01      	subs	r3, #1
 8000172:	71fb      	strb	r3, [r7, #7]
	switch (start_state){
 8000174:	4b5c      	ldr	r3, [pc, #368]	; (80002e8 <command_parser_fsm1+0x19c>)
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	2b05      	cmp	r3, #5
 800017a:	f200 80a1 	bhi.w	80002c0 <command_parser_fsm1+0x174>
 800017e:	a201      	add	r2, pc, #4	; (adr r2, 8000184 <command_parser_fsm1+0x38>)
 8000180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000184:	0800019d 	.word	0x0800019d
 8000188:	080001b1 	.word	0x080001b1
 800018c:	080001eb 	.word	0x080001eb
 8000190:	08000225 	.word	0x08000225
 8000194:	0800025f 	.word	0x0800025f
 8000198:	0800029f 	.word	0x0800029f
		case INIT:
			if(buffer[index] == '!') start_state = _;
 800019c:	79fb      	ldrb	r3, [r7, #7]
 800019e:	4a53      	ldr	r2, [pc, #332]	; (80002ec <command_parser_fsm1+0x1a0>)
 80001a0:	5cd3      	ldrb	r3, [r2, r3]
 80001a2:	2b21      	cmp	r3, #33	; 0x21
 80001a4:	f040 808e 	bne.w	80002c4 <command_parser_fsm1+0x178>
 80001a8:	4b4f      	ldr	r3, [pc, #316]	; (80002e8 <command_parser_fsm1+0x19c>)
 80001aa:	2201      	movs	r2, #1
 80001ac:	701a      	strb	r2, [r3, #0]
			break;
 80001ae:	e089      	b.n	80002c4 <command_parser_fsm1+0x178>
		case _:
			if(buffer[index] = '!') start_state = _;
 80001b0:	79fb      	ldrb	r3, [r7, #7]
 80001b2:	4a4e      	ldr	r2, [pc, #312]	; (80002ec <command_parser_fsm1+0x1a0>)
 80001b4:	2121      	movs	r1, #33	; 0x21
 80001b6:	54d1      	strb	r1, [r2, r3]
 80001b8:	4b4b      	ldr	r3, [pc, #300]	; (80002e8 <command_parser_fsm1+0x19c>)
 80001ba:	2201      	movs	r2, #1
 80001bc:	701a      	strb	r2, [r3, #0]
			if(buffer[index] == 'R') start_state =_R;
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	4a4a      	ldr	r2, [pc, #296]	; (80002ec <command_parser_fsm1+0x1a0>)
 80001c2:	5cd3      	ldrb	r3, [r2, r3]
 80001c4:	2b52      	cmp	r3, #82	; 0x52
 80001c6:	d102      	bne.n	80001ce <command_parser_fsm1+0x82>
 80001c8:	4b47      	ldr	r3, [pc, #284]	; (80002e8 <command_parser_fsm1+0x19c>)
 80001ca:	2202      	movs	r2, #2
 80001cc:	701a      	strb	r2, [r3, #0]
			if(buffer[index]!='!'&&buffer[index]!='R') start_state=INIT;
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	4a46      	ldr	r2, [pc, #280]	; (80002ec <command_parser_fsm1+0x1a0>)
 80001d2:	5cd3      	ldrb	r3, [r2, r3]
 80001d4:	2b21      	cmp	r3, #33	; 0x21
 80001d6:	d077      	beq.n	80002c8 <command_parser_fsm1+0x17c>
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	4a44      	ldr	r2, [pc, #272]	; (80002ec <command_parser_fsm1+0x1a0>)
 80001dc:	5cd3      	ldrb	r3, [r2, r3]
 80001de:	2b52      	cmp	r3, #82	; 0x52
 80001e0:	d072      	beq.n	80002c8 <command_parser_fsm1+0x17c>
 80001e2:	4b41      	ldr	r3, [pc, #260]	; (80002e8 <command_parser_fsm1+0x19c>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	701a      	strb	r2, [r3, #0]
			break;
 80001e8:	e06e      	b.n	80002c8 <command_parser_fsm1+0x17c>
		case _R:
			if(buffer[index] == 'S') start_state =_RS;
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	4a3f      	ldr	r2, [pc, #252]	; (80002ec <command_parser_fsm1+0x1a0>)
 80001ee:	5cd3      	ldrb	r3, [r2, r3]
 80001f0:	2b53      	cmp	r3, #83	; 0x53
 80001f2:	d102      	bne.n	80001fa <command_parser_fsm1+0xae>
 80001f4:	4b3c      	ldr	r3, [pc, #240]	; (80002e8 <command_parser_fsm1+0x19c>)
 80001f6:	2203      	movs	r2, #3
 80001f8:	701a      	strb	r2, [r3, #0]
			if(buffer[index] = '!') start_state = _;
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	4a3b      	ldr	r2, [pc, #236]	; (80002ec <command_parser_fsm1+0x1a0>)
 80001fe:	2121      	movs	r1, #33	; 0x21
 8000200:	54d1      	strb	r1, [r2, r3]
 8000202:	4b39      	ldr	r3, [pc, #228]	; (80002e8 <command_parser_fsm1+0x19c>)
 8000204:	2201      	movs	r2, #1
 8000206:	701a      	strb	r2, [r3, #0]
			if(buffer[index]!='!'&&buffer[index]!='S') start_state=INIT;
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	4a38      	ldr	r2, [pc, #224]	; (80002ec <command_parser_fsm1+0x1a0>)
 800020c:	5cd3      	ldrb	r3, [r2, r3]
 800020e:	2b21      	cmp	r3, #33	; 0x21
 8000210:	d05c      	beq.n	80002cc <command_parser_fsm1+0x180>
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	4a35      	ldr	r2, [pc, #212]	; (80002ec <command_parser_fsm1+0x1a0>)
 8000216:	5cd3      	ldrb	r3, [r2, r3]
 8000218:	2b53      	cmp	r3, #83	; 0x53
 800021a:	d057      	beq.n	80002cc <command_parser_fsm1+0x180>
 800021c:	4b32      	ldr	r3, [pc, #200]	; (80002e8 <command_parser_fsm1+0x19c>)
 800021e:	2200      	movs	r2, #0
 8000220:	701a      	strb	r2, [r3, #0]
			break;
 8000222:	e053      	b.n	80002cc <command_parser_fsm1+0x180>
		case _RS:
			if(buffer[index] == 'T') start_state =_RST;
 8000224:	79fb      	ldrb	r3, [r7, #7]
 8000226:	4a31      	ldr	r2, [pc, #196]	; (80002ec <command_parser_fsm1+0x1a0>)
 8000228:	5cd3      	ldrb	r3, [r2, r3]
 800022a:	2b54      	cmp	r3, #84	; 0x54
 800022c:	d102      	bne.n	8000234 <command_parser_fsm1+0xe8>
 800022e:	4b2e      	ldr	r3, [pc, #184]	; (80002e8 <command_parser_fsm1+0x19c>)
 8000230:	2204      	movs	r2, #4
 8000232:	701a      	strb	r2, [r3, #0]
			if(buffer[index] = '!') start_state = _;
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	4a2d      	ldr	r2, [pc, #180]	; (80002ec <command_parser_fsm1+0x1a0>)
 8000238:	2121      	movs	r1, #33	; 0x21
 800023a:	54d1      	strb	r1, [r2, r3]
 800023c:	4b2a      	ldr	r3, [pc, #168]	; (80002e8 <command_parser_fsm1+0x19c>)
 800023e:	2201      	movs	r2, #1
 8000240:	701a      	strb	r2, [r3, #0]
			if(buffer[index]!='!'&&buffer[index]!='T') start_state=INIT;
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	4a29      	ldr	r2, [pc, #164]	; (80002ec <command_parser_fsm1+0x1a0>)
 8000246:	5cd3      	ldrb	r3, [r2, r3]
 8000248:	2b21      	cmp	r3, #33	; 0x21
 800024a:	d041      	beq.n	80002d0 <command_parser_fsm1+0x184>
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	4a27      	ldr	r2, [pc, #156]	; (80002ec <command_parser_fsm1+0x1a0>)
 8000250:	5cd3      	ldrb	r3, [r2, r3]
 8000252:	2b54      	cmp	r3, #84	; 0x54
 8000254:	d03c      	beq.n	80002d0 <command_parser_fsm1+0x184>
 8000256:	4b24      	ldr	r3, [pc, #144]	; (80002e8 <command_parser_fsm1+0x19c>)
 8000258:	2200      	movs	r2, #0
 800025a:	701a      	strb	r2, [r3, #0]
			break;
 800025c:	e038      	b.n	80002d0 <command_parser_fsm1+0x184>
		case _RST:
			if(buffer[index] == '#') {
 800025e:	79fb      	ldrb	r3, [r7, #7]
 8000260:	4a22      	ldr	r2, [pc, #136]	; (80002ec <command_parser_fsm1+0x1a0>)
 8000262:	5cd3      	ldrb	r3, [r2, r3]
 8000264:	2b23      	cmp	r3, #35	; 0x23
 8000266:	d105      	bne.n	8000274 <command_parser_fsm1+0x128>
				start_state =_RST_;
 8000268:	4b1f      	ldr	r3, [pc, #124]	; (80002e8 <command_parser_fsm1+0x19c>)
 800026a:	2205      	movs	r2, #5
 800026c:	701a      	strb	r2, [r3, #0]
				status_communication=SEND;
 800026e:	4b20      	ldr	r3, [pc, #128]	; (80002f0 <command_parser_fsm1+0x1a4>)
 8000270:	2209      	movs	r2, #9
 8000272:	701a      	strb	r2, [r3, #0]
			}
			if(buffer[index] = '!') start_state = _;
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	4a1d      	ldr	r2, [pc, #116]	; (80002ec <command_parser_fsm1+0x1a0>)
 8000278:	2121      	movs	r1, #33	; 0x21
 800027a:	54d1      	strb	r1, [r2, r3]
 800027c:	4b1a      	ldr	r3, [pc, #104]	; (80002e8 <command_parser_fsm1+0x19c>)
 800027e:	2201      	movs	r2, #1
 8000280:	701a      	strb	r2, [r3, #0]
			if(buffer[index]!='!'&&buffer[index]!='#') start_state=INIT;
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	4a19      	ldr	r2, [pc, #100]	; (80002ec <command_parser_fsm1+0x1a0>)
 8000286:	5cd3      	ldrb	r3, [r2, r3]
 8000288:	2b21      	cmp	r3, #33	; 0x21
 800028a:	d023      	beq.n	80002d4 <command_parser_fsm1+0x188>
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	4a17      	ldr	r2, [pc, #92]	; (80002ec <command_parser_fsm1+0x1a0>)
 8000290:	5cd3      	ldrb	r3, [r2, r3]
 8000292:	2b23      	cmp	r3, #35	; 0x23
 8000294:	d01e      	beq.n	80002d4 <command_parser_fsm1+0x188>
 8000296:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <command_parser_fsm1+0x19c>)
 8000298:	2200      	movs	r2, #0
 800029a:	701a      	strb	r2, [r3, #0]
			break;
 800029c:	e01a      	b.n	80002d4 <command_parser_fsm1+0x188>
		case _RST_:
			if(buffer[index]=='!') start_state=_;
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	4a12      	ldr	r2, [pc, #72]	; (80002ec <command_parser_fsm1+0x1a0>)
 80002a2:	5cd3      	ldrb	r3, [r2, r3]
 80002a4:	2b21      	cmp	r3, #33	; 0x21
 80002a6:	d102      	bne.n	80002ae <command_parser_fsm1+0x162>
 80002a8:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <command_parser_fsm1+0x19c>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	701a      	strb	r2, [r3, #0]
			if(buffer[index]!='!') start_state=INIT;
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	4a0e      	ldr	r2, [pc, #56]	; (80002ec <command_parser_fsm1+0x1a0>)
 80002b2:	5cd3      	ldrb	r3, [r2, r3]
 80002b4:	2b21      	cmp	r3, #33	; 0x21
 80002b6:	d00f      	beq.n	80002d8 <command_parser_fsm1+0x18c>
 80002b8:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <command_parser_fsm1+0x19c>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	701a      	strb	r2, [r3, #0]
			break;
 80002be:	e00b      	b.n	80002d8 <command_parser_fsm1+0x18c>
		default:
			break;
 80002c0:	bf00      	nop
 80002c2:	e00a      	b.n	80002da <command_parser_fsm1+0x18e>
			break;
 80002c4:	bf00      	nop
 80002c6:	e008      	b.n	80002da <command_parser_fsm1+0x18e>
			break;
 80002c8:	bf00      	nop
 80002ca:	e006      	b.n	80002da <command_parser_fsm1+0x18e>
			break;
 80002cc:	bf00      	nop
 80002ce:	e004      	b.n	80002da <command_parser_fsm1+0x18e>
			break;
 80002d0:	bf00      	nop
 80002d2:	e002      	b.n	80002da <command_parser_fsm1+0x18e>
			break;
 80002d4:	bf00      	nop
 80002d6:	e000      	b.n	80002da <command_parser_fsm1+0x18e>
			break;
 80002d8:	bf00      	nop
	}

}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	20000091 	.word	0x20000091
 80002e8:	20000093 	.word	0x20000093
 80002ec:	200000dc 	.word	0x200000dc
 80002f0:	20000095 	.word	0x20000095

080002f4 <command_parser_fsm2>:
//Check !OK# message
void  command_parser_fsm2(){
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
	uint8_t index2;
	if(index_buffer == 0) index2 = MAX_BUFFER_SIZE - 1;
 80002fa:	4b45      	ldr	r3, [pc, #276]	; (8000410 <command_parser_fsm2+0x11c>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d101      	bne.n	8000306 <command_parser_fsm2+0x12>
 8000302:	231d      	movs	r3, #29
 8000304:	71fb      	strb	r3, [r7, #7]
	if(index_buffer != 0) index2 = index_buffer - 1;
 8000306:	4b42      	ldr	r3, [pc, #264]	; (8000410 <command_parser_fsm2+0x11c>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d003      	beq.n	8000316 <command_parser_fsm2+0x22>
 800030e:	4b40      	ldr	r3, [pc, #256]	; (8000410 <command_parser_fsm2+0x11c>)
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	3b01      	subs	r3, #1
 8000314:	71fb      	strb	r3, [r7, #7]
	switch(end_state){
 8000316:	4b3f      	ldr	r3, [pc, #252]	; (8000414 <command_parser_fsm2+0x120>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	2b08      	cmp	r3, #8
 800031c:	d869      	bhi.n	80003f2 <command_parser_fsm2+0xfe>
 800031e:	a201      	add	r2, pc, #4	; (adr r2, 8000324 <command_parser_fsm2+0x30>)
 8000320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000324:	08000349 	.word	0x08000349
 8000328:	0800035b 	.word	0x0800035b
 800032c:	080003f3 	.word	0x080003f3
 8000330:	080003f3 	.word	0x080003f3
 8000334:	080003f3 	.word	0x080003f3
 8000338:	080003f3 	.word	0x080003f3
 800033c:	08000387 	.word	0x08000387
 8000340:	080003a9 	.word	0x080003a9
 8000344:	080003d1 	.word	0x080003d1
		case INIT:
			if(buffer[index2] == '!') end_state = _;
 8000348:	79fb      	ldrb	r3, [r7, #7]
 800034a:	4a33      	ldr	r2, [pc, #204]	; (8000418 <command_parser_fsm2+0x124>)
 800034c:	5cd3      	ldrb	r3, [r2, r3]
 800034e:	2b21      	cmp	r3, #33	; 0x21
 8000350:	d151      	bne.n	80003f6 <command_parser_fsm2+0x102>
 8000352:	4b30      	ldr	r3, [pc, #192]	; (8000414 <command_parser_fsm2+0x120>)
 8000354:	2201      	movs	r2, #1
 8000356:	701a      	strb	r2, [r3, #0]
			break;
 8000358:	e04d      	b.n	80003f6 <command_parser_fsm2+0x102>
		case _:
			if(buffer[index2]=='!') end_state=_;
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	4a2e      	ldr	r2, [pc, #184]	; (8000418 <command_parser_fsm2+0x124>)
 800035e:	5cd3      	ldrb	r3, [r2, r3]
 8000360:	2b21      	cmp	r3, #33	; 0x21
 8000362:	d103      	bne.n	800036c <command_parser_fsm2+0x78>
 8000364:	4b2b      	ldr	r3, [pc, #172]	; (8000414 <command_parser_fsm2+0x120>)
 8000366:	2201      	movs	r2, #1
 8000368:	701a      	strb	r2, [r3, #0]
			else if(buffer[index2]=='O') end_state=_O;
			else end_state=INIT;
			break;
 800036a:	e04b      	b.n	8000404 <command_parser_fsm2+0x110>
			else if(buffer[index2]=='O') end_state=_O;
 800036c:	79fb      	ldrb	r3, [r7, #7]
 800036e:	4a2a      	ldr	r2, [pc, #168]	; (8000418 <command_parser_fsm2+0x124>)
 8000370:	5cd3      	ldrb	r3, [r2, r3]
 8000372:	2b4f      	cmp	r3, #79	; 0x4f
 8000374:	d103      	bne.n	800037e <command_parser_fsm2+0x8a>
 8000376:	4b27      	ldr	r3, [pc, #156]	; (8000414 <command_parser_fsm2+0x120>)
 8000378:	2206      	movs	r2, #6
 800037a:	701a      	strb	r2, [r3, #0]
			break;
 800037c:	e042      	b.n	8000404 <command_parser_fsm2+0x110>
			else end_state=INIT;
 800037e:	4b25      	ldr	r3, [pc, #148]	; (8000414 <command_parser_fsm2+0x120>)
 8000380:	2200      	movs	r2, #0
 8000382:	701a      	strb	r2, [r3, #0]
			break;
 8000384:	e03e      	b.n	8000404 <command_parser_fsm2+0x110>
		case _O:
			if(buffer[index2]=='K') end_state=_OK;
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	4a23      	ldr	r2, [pc, #140]	; (8000418 <command_parser_fsm2+0x124>)
 800038a:	5cd3      	ldrb	r3, [r2, r3]
 800038c:	2b4b      	cmp	r3, #75	; 0x4b
 800038e:	d102      	bne.n	8000396 <command_parser_fsm2+0xa2>
 8000390:	4b20      	ldr	r3, [pc, #128]	; (8000414 <command_parser_fsm2+0x120>)
 8000392:	2207      	movs	r2, #7
 8000394:	701a      	strb	r2, [r3, #0]
			if(buffer[index2]!='K') end_state=INIT;
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	4a1f      	ldr	r2, [pc, #124]	; (8000418 <command_parser_fsm2+0x124>)
 800039a:	5cd3      	ldrb	r3, [r2, r3]
 800039c:	2b4b      	cmp	r3, #75	; 0x4b
 800039e:	d02c      	beq.n	80003fa <command_parser_fsm2+0x106>
 80003a0:	4b1c      	ldr	r3, [pc, #112]	; (8000414 <command_parser_fsm2+0x120>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	701a      	strb	r2, [r3, #0]
			break;
 80003a6:	e028      	b.n	80003fa <command_parser_fsm2+0x106>
		case _OK:
			if(buffer[index2]=='#'){
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	4a1b      	ldr	r2, [pc, #108]	; (8000418 <command_parser_fsm2+0x124>)
 80003ac:	5cd3      	ldrb	r3, [r2, r3]
 80003ae:	2b23      	cmp	r3, #35	; 0x23
 80003b0:	d105      	bne.n	80003be <command_parser_fsm2+0xca>
				end_state=_OK_;
 80003b2:	4b18      	ldr	r3, [pc, #96]	; (8000414 <command_parser_fsm2+0x120>)
 80003b4:	2208      	movs	r2, #8
 80003b6:	701a      	strb	r2, [r3, #0]
				status_communication=END;
 80003b8:	4b18      	ldr	r3, [pc, #96]	; (800041c <command_parser_fsm2+0x128>)
 80003ba:	220a      	movs	r2, #10
 80003bc:	701a      	strb	r2, [r3, #0]
			}
			if(buffer[index2]!='#') end_state=INIT;
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	4a15      	ldr	r2, [pc, #84]	; (8000418 <command_parser_fsm2+0x124>)
 80003c2:	5cd3      	ldrb	r3, [r2, r3]
 80003c4:	2b23      	cmp	r3, #35	; 0x23
 80003c6:	d01a      	beq.n	80003fe <command_parser_fsm2+0x10a>
 80003c8:	4b12      	ldr	r3, [pc, #72]	; (8000414 <command_parser_fsm2+0x120>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	701a      	strb	r2, [r3, #0]
			break;
 80003ce:	e016      	b.n	80003fe <command_parser_fsm2+0x10a>
		case _OK_:
			if(buffer[index2]=='!') end_state=_;
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	4a11      	ldr	r2, [pc, #68]	; (8000418 <command_parser_fsm2+0x124>)
 80003d4:	5cd3      	ldrb	r3, [r2, r3]
 80003d6:	2b21      	cmp	r3, #33	; 0x21
 80003d8:	d102      	bne.n	80003e0 <command_parser_fsm2+0xec>
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <command_parser_fsm2+0x120>)
 80003dc:	2201      	movs	r2, #1
 80003de:	701a      	strb	r2, [r3, #0]
			if(buffer[index2]!='!') end_state=INIT;
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	4a0d      	ldr	r2, [pc, #52]	; (8000418 <command_parser_fsm2+0x124>)
 80003e4:	5cd3      	ldrb	r3, [r2, r3]
 80003e6:	2b21      	cmp	r3, #33	; 0x21
 80003e8:	d00b      	beq.n	8000402 <command_parser_fsm2+0x10e>
 80003ea:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <command_parser_fsm2+0x120>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	701a      	strb	r2, [r3, #0]
			break;
 80003f0:	e007      	b.n	8000402 <command_parser_fsm2+0x10e>
		default:
			break;
 80003f2:	bf00      	nop
 80003f4:	e006      	b.n	8000404 <command_parser_fsm2+0x110>
			break;
 80003f6:	bf00      	nop
 80003f8:	e004      	b.n	8000404 <command_parser_fsm2+0x110>
			break;
 80003fa:	bf00      	nop
 80003fc:	e002      	b.n	8000404 <command_parser_fsm2+0x110>
			break;
 80003fe:	bf00      	nop
 8000400:	e000      	b.n	8000404 <command_parser_fsm2+0x110>
			break;
 8000402:	bf00      	nop
	}
}
 8000404:	bf00      	nop
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	20000091 	.word	0x20000091
 8000414:	20000094 	.word	0x20000094
 8000418:	200000dc 	.word	0x200000dc
 800041c:	20000095 	.word	0x20000095

08000420 <uart_communiation_fsm>:
 //communication with console
void uart_communiation_fsm (){
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	switch(status_communication){
 8000424:	4b1f      	ldr	r3, [pc, #124]	; (80004a4 <uart_communiation_fsm+0x84>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b0a      	cmp	r3, #10
 800042a:	d022      	beq.n	8000472 <uart_communiation_fsm+0x52>
 800042c:	2b0a      	cmp	r3, #10
 800042e:	dc31      	bgt.n	8000494 <uart_communiation_fsm+0x74>
 8000430:	2b00      	cmp	r3, #0
 8000432:	d031      	beq.n	8000498 <uart_communiation_fsm+0x78>
 8000434:	2b09      	cmp	r3, #9
 8000436:	d000      	beq.n	800043a <uart_communiation_fsm+0x1a>
	  case END:
		  HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "\r\n%s\r\n","END"), 1000);
		  status_communication=INIT;
		  break;
	  default:
		  break;
 8000438:	e02c      	b.n	8000494 <uart_communiation_fsm+0x74>
		  if(timer1_flag==1){
 800043a:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <uart_communiation_fsm+0x88>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	2b01      	cmp	r3, #1
 8000440:	d12c      	bne.n	800049c <uart_communiation_fsm+0x7c>
		  		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "\r\n!%ld#\r\n",ADC_value), 1000);
 8000442:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <uart_communiation_fsm+0x8c>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	461a      	mov	r2, r3
 8000448:	4919      	ldr	r1, [pc, #100]	; (80004b0 <uart_communiation_fsm+0x90>)
 800044a:	481a      	ldr	r0, [pc, #104]	; (80004b4 <uart_communiation_fsm+0x94>)
 800044c:	f002 fc1a 	bl	8002c84 <siprintf>
 8000450:	4603      	mov	r3, r0
 8000452:	b29a      	uxth	r2, r3
 8000454:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000458:	4916      	ldr	r1, [pc, #88]	; (80004b4 <uart_communiation_fsm+0x94>)
 800045a:	4817      	ldr	r0, [pc, #92]	; (80004b8 <uart_communiation_fsm+0x98>)
 800045c:	f001 fdb0 	bl	8001fc0 <HAL_UART_Transmit>
		  		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000460:	2120      	movs	r1, #32
 8000462:	4816      	ldr	r0, [pc, #88]	; (80004bc <uart_communiation_fsm+0x9c>)
 8000464:	f001 f87e 	bl	8001564 <HAL_GPIO_TogglePin>
		  		setTimer1(3000);
 8000468:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800046c:	f000 f944 	bl	80006f8 <setTimer1>
		  break;
 8000470:	e014      	b.n	800049c <uart_communiation_fsm+0x7c>
		  HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "\r\n%s\r\n","END"), 1000);
 8000472:	4a13      	ldr	r2, [pc, #76]	; (80004c0 <uart_communiation_fsm+0xa0>)
 8000474:	4913      	ldr	r1, [pc, #76]	; (80004c4 <uart_communiation_fsm+0xa4>)
 8000476:	480f      	ldr	r0, [pc, #60]	; (80004b4 <uart_communiation_fsm+0x94>)
 8000478:	f002 fc04 	bl	8002c84 <siprintf>
 800047c:	4603      	mov	r3, r0
 800047e:	b29a      	uxth	r2, r3
 8000480:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000484:	490b      	ldr	r1, [pc, #44]	; (80004b4 <uart_communiation_fsm+0x94>)
 8000486:	480c      	ldr	r0, [pc, #48]	; (80004b8 <uart_communiation_fsm+0x98>)
 8000488:	f001 fd9a 	bl	8001fc0 <HAL_UART_Transmit>
		  status_communication=INIT;
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <uart_communiation_fsm+0x84>)
 800048e:	2200      	movs	r2, #0
 8000490:	701a      	strb	r2, [r3, #0]
		  break;
 8000492:	e004      	b.n	800049e <uart_communiation_fsm+0x7e>
		  break;
 8000494:	bf00      	nop
 8000496:	e002      	b.n	800049e <uart_communiation_fsm+0x7e>
		  break;
 8000498:	bf00      	nop
 800049a:	e000      	b.n	800049e <uart_communiation_fsm+0x7e>
		  break;
 800049c:	bf00      	nop
	  }
 }
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20000095 	.word	0x20000095
 80004a8:	2000009c 	.word	0x2000009c
 80004ac:	20000000 	.word	0x20000000
 80004b0:	08003510 	.word	0x08003510
 80004b4:	20000144 	.word	0x20000144
 80004b8:	200000fc 	.word	0x200000fc
 80004bc:	40010800 	.word	0x40010800
 80004c0:	0800351c 	.word	0x0800351c
 80004c4:	08003520 	.word	0x08003520

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fa84 	bl	80009d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f822 	bl	8000518 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8d8 	bl	8000688 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004d8:	f000 f86e 	bl	80005b8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80004dc:	f000 f8aa 	bl	8000634 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 80004e0:	2201      	movs	r2, #1
 80004e2:	490a      	ldr	r1, [pc, #40]	; (800050c <main+0x44>)
 80004e4:	480a      	ldr	r0, [pc, #40]	; (8000510 <main+0x48>)
 80004e6:	f001 fdee 	bl	80020c6 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(10);
 80004ea:	200a      	movs	r0, #10
 80004ec:	f000 f904 	bl	80006f8 <setTimer1>
  while(1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(buffer_flag == 1) {
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <main+0x4c>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d106      	bne.n	8000506 <main+0x3e>
	 		  command_parser_fsm1() ;
 80004f8:	f7ff fe28 	bl	800014c <command_parser_fsm1>
	 		  command_parser_fsm2() ;
 80004fc:	f7ff fefa 	bl	80002f4 <command_parser_fsm2>
	 		  buffer_flag = 0;
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <main+0x4c>)
 8000502:	2200      	movs	r2, #0
 8000504:	701a      	strb	r2, [r3, #0]
	  }
	  uart_communiation_fsm ();
 8000506:	f7ff ff8b 	bl	8000420 <uart_communiation_fsm>
	  if(buffer_flag == 1) {
 800050a:	e7f1      	b.n	80004f0 <main+0x28>
 800050c:	20000090 	.word	0x20000090
 8000510:	200000fc 	.word	0x200000fc
 8000514:	20000092 	.word	0x20000092

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	; 0x50
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000522:	2228      	movs	r2, #40	; 0x28
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f002 fba4 	bl	8002c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 0314 	add.w	r3, r7, #20
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000548:	2302      	movs	r3, #2
 800054a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800054c:	2301      	movs	r3, #1
 800054e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000550:	2310      	movs	r3, #16
 8000552:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000554:	2300      	movs	r3, #0
 8000556:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000558:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800055c:	4618      	mov	r0, r3
 800055e:	f001 f81b 	bl	8001598 <HAL_RCC_OscConfig>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000568:	f000 f8c0 	bl	80006ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056c:	230f      	movs	r3, #15
 800056e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000570:	2300      	movs	r3, #0
 8000572:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f001 fa86 	bl	8001a98 <HAL_RCC_ClockConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000592:	f000 f8ab 	bl	80006ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000596:	2302      	movs	r3, #2
 8000598:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 fc07 	bl	8001db4 <HAL_RCCEx_PeriphCLKConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005ac:	f000 f89e 	bl	80006ec <Error_Handler>
  }
}
 80005b0:	bf00      	nop
 80005b2:	3750      	adds	r7, #80	; 0x50
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80005c8:	4b18      	ldr	r3, [pc, #96]	; (800062c <MX_ADC1_Init+0x74>)
 80005ca:	4a19      	ldr	r2, [pc, #100]	; (8000630 <MX_ADC1_Init+0x78>)
 80005cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ce:	4b17      	ldr	r3, [pc, #92]	; (800062c <MX_ADC1_Init+0x74>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005d4:	4b15      	ldr	r3, [pc, #84]	; (800062c <MX_ADC1_Init+0x74>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005da:	4b14      	ldr	r3, [pc, #80]	; (800062c <MX_ADC1_Init+0x74>)
 80005dc:	2200      	movs	r2, #0
 80005de:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_ADC1_Init+0x74>)
 80005e2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80005e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e8:	4b10      	ldr	r3, [pc, #64]	; (800062c <MX_ADC1_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_ADC1_Init+0x74>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <MX_ADC1_Init+0x74>)
 80005f6:	f000 fa51 	bl	8000a9c <HAL_ADC_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000600:	f000 f874 	bl	80006ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000608:	2301      	movs	r3, #1
 800060a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	4619      	mov	r1, r3
 8000614:	4805      	ldr	r0, [pc, #20]	; (800062c <MX_ADC1_Init+0x74>)
 8000616:	f000 fb19 	bl	8000c4c <HAL_ADC_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000620:	f000 f864 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	200000ac 	.word	0x200000ac
 8000630:	40012400 	.word	0x40012400

08000634 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <MX_USART2_UART_Init+0x50>)
 800063c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000640:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000644:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_USART2_UART_Init+0x4c>)
 800066c:	f001 fc58 	bl	8001f20 <HAL_UART_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000676:	f000 f839 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200000fc 	.word	0x200000fc
 8000684:	40004400 	.word	0x40004400

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 0308 	add.w	r3, r7, #8
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_GPIO_Init+0x5c>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a10      	ldr	r2, [pc, #64]	; (80006e4 <MX_GPIO_Init+0x5c>)
 80006a2:	f043 0304 	orr.w	r3, r3, #4
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_GPIO_Init+0x5c>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f003 0304 	and.w	r3, r3, #4
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|TIM3_CH1_Pin, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2160      	movs	r1, #96	; 0x60
 80006b8:	480b      	ldr	r0, [pc, #44]	; (80006e8 <MX_GPIO_Init+0x60>)
 80006ba:	f000 ff3b 	bl	8001534 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_Pin TIM3_CH1_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|TIM3_CH1_Pin;
 80006be:	2360      	movs	r3, #96	; 0x60
 80006c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2302      	movs	r3, #2
 80006cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ce:	f107 0308 	add.w	r3, r7, #8
 80006d2:	4619      	mov	r1, r3
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <MX_GPIO_Init+0x60>)
 80006d6:	f000 fdb3 	bl	8001240 <HAL_GPIO_Init>

}
 80006da:	bf00      	nop
 80006dc:	3718      	adds	r7, #24
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40010800 	.word	0x40010800

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <Error_Handler+0x8>
	...

080006f8 <setTimer1>:


#include "software_timer.h"
int timer1_counter=0;
int timer1_flag=0;
void setTimer1(int duration){
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	timer1_counter=duration/TICK;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4a08      	ldr	r2, [pc, #32]	; (8000724 <setTimer1+0x2c>)
 8000704:	fb82 1203 	smull	r1, r2, r2, r3
 8000708:	1092      	asrs	r2, r2, #2
 800070a:	17db      	asrs	r3, r3, #31
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	4a06      	ldr	r2, [pc, #24]	; (8000728 <setTimer1+0x30>)
 8000710:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <setTimer1+0x34>)
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	66666667 	.word	0x66666667
 8000728:	20000098 	.word	0x20000098
 800072c:	2000009c 	.word	0x2000009c

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <HAL_MspInit+0x5c>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	4a14      	ldr	r2, [pc, #80]	; (800078c <HAL_MspInit+0x5c>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6193      	str	r3, [r2, #24]
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <HAL_MspInit+0x5c>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <HAL_MspInit+0x5c>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	4a0e      	ldr	r2, [pc, #56]	; (800078c <HAL_MspInit+0x5c>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000758:	61d3      	str	r3, [r2, #28]
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <HAL_MspInit+0x5c>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000766:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <HAL_MspInit+0x60>)
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	4a04      	ldr	r2, [pc, #16]	; (8000790 <HAL_MspInit+0x60>)
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000782:	bf00      	nop
 8000784:	3714      	adds	r7, #20
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	40021000 	.word	0x40021000
 8000790:	40010000 	.word	0x40010000

08000794 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a14      	ldr	r2, [pc, #80]	; (8000800 <HAL_ADC_MspInit+0x6c>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d121      	bne.n	80007f8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <HAL_ADC_MspInit+0x70>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	4a12      	ldr	r2, [pc, #72]	; (8000804 <HAL_ADC_MspInit+0x70>)
 80007ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007be:	6193      	str	r3, [r2, #24]
 80007c0:	4b10      	ldr	r3, [pc, #64]	; (8000804 <HAL_ADC_MspInit+0x70>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <HAL_ADC_MspInit+0x70>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	4a0c      	ldr	r2, [pc, #48]	; (8000804 <HAL_ADC_MspInit+0x70>)
 80007d2:	f043 0304 	orr.w	r3, r3, #4
 80007d6:	6193      	str	r3, [r2, #24]
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <HAL_ADC_MspInit+0x70>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f003 0304 	and.w	r3, r3, #4
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007e4:	2301      	movs	r3, #1
 80007e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e8:	2303      	movs	r3, #3
 80007ea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	4619      	mov	r1, r3
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <HAL_ADC_MspInit+0x74>)
 80007f4:	f000 fd24 	bl	8001240 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007f8:	bf00      	nop
 80007fa:	3720      	adds	r7, #32
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40012400 	.word	0x40012400
 8000804:	40021000 	.word	0x40021000
 8000808:	40010800 	.word	0x40010800

0800080c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a1f      	ldr	r2, [pc, #124]	; (80008a4 <HAL_UART_MspInit+0x98>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d137      	bne.n	800089c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <HAL_UART_MspInit+0x9c>)
 800082e:	69db      	ldr	r3, [r3, #28]
 8000830:	4a1d      	ldr	r2, [pc, #116]	; (80008a8 <HAL_UART_MspInit+0x9c>)
 8000832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000836:	61d3      	str	r3, [r2, #28]
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <HAL_UART_MspInit+0x9c>)
 800083a:	69db      	ldr	r3, [r3, #28]
 800083c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <HAL_UART_MspInit+0x9c>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a17      	ldr	r2, [pc, #92]	; (80008a8 <HAL_UART_MspInit+0x9c>)
 800084a:	f043 0304 	orr.w	r3, r3, #4
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <HAL_UART_MspInit+0x9c>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f003 0304 	and.w	r3, r3, #4
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800085c:	2304      	movs	r3, #4
 800085e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000864:	2303      	movs	r3, #3
 8000866:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	4619      	mov	r1, r3
 800086e:	480f      	ldr	r0, [pc, #60]	; (80008ac <HAL_UART_MspInit+0xa0>)
 8000870:	f000 fce6 	bl	8001240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000874:	2308      	movs	r3, #8
 8000876:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	4619      	mov	r1, r3
 8000886:	4809      	ldr	r0, [pc, #36]	; (80008ac <HAL_UART_MspInit+0xa0>)
 8000888:	f000 fcda 	bl	8001240 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800088c:	2200      	movs	r2, #0
 800088e:	2100      	movs	r1, #0
 8000890:	2026      	movs	r0, #38	; 0x26
 8000892:	f000 fbec 	bl	800106e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000896:	2026      	movs	r0, #38	; 0x26
 8000898:	f000 fc05 	bl	80010a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800089c:	bf00      	nop
 800089e:	3720      	adds	r7, #32
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40004400 	.word	0x40004400
 80008a8:	40021000 	.word	0x40021000
 80008ac:	40010800 	.word	0x40010800

080008b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <NMI_Handler+0x4>

080008b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <HardFault_Handler+0x4>

080008bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <MemManage_Handler+0x4>

080008c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <BusFault_Handler+0x4>

080008c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <UsageFault_Handler+0x4>

080008ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr

080008da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr

080008e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr

080008f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f6:	f000 f8b5 	bl	8000a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000904:	4802      	ldr	r0, [pc, #8]	; (8000910 <USART2_IRQHandler+0x10>)
 8000906:	f001 fc03 	bl	8002110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200000fc 	.word	0x200000fc

08000914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800091c:	4a14      	ldr	r2, [pc, #80]	; (8000970 <_sbrk+0x5c>)
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <_sbrk+0x60>)
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <_sbrk+0x64>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d102      	bne.n	8000936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <_sbrk+0x64>)
 8000932:	4a12      	ldr	r2, [pc, #72]	; (800097c <_sbrk+0x68>)
 8000934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <_sbrk+0x64>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4413      	add	r3, r2
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	429a      	cmp	r2, r3
 8000942:	d207      	bcs.n	8000954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000944:	f002 f96c 	bl	8002c20 <__errno>
 8000948:	4603      	mov	r3, r0
 800094a:	220c      	movs	r2, #12
 800094c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800094e:	f04f 33ff 	mov.w	r3, #4294967295
 8000952:	e009      	b.n	8000968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <_sbrk+0x64>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800095a:	4b07      	ldr	r3, [pc, #28]	; (8000978 <_sbrk+0x64>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	4a05      	ldr	r2, [pc, #20]	; (8000978 <_sbrk+0x64>)
 8000964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000966:	68fb      	ldr	r3, [r7, #12]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20002800 	.word	0x20002800
 8000974:	00000400 	.word	0x00000400
 8000978:	200000a0 	.word	0x200000a0
 800097c:	20000170 	.word	0x20000170

08000980 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr

0800098c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800098c:	f7ff fff8 	bl	8000980 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000990:	480b      	ldr	r0, [pc, #44]	; (80009c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000992:	490c      	ldr	r1, [pc, #48]	; (80009c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000994:	4a0c      	ldr	r2, [pc, #48]	; (80009c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000998:	e002      	b.n	80009a0 <LoopCopyDataInit>

0800099a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800099c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099e:	3304      	adds	r3, #4

080009a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a4:	d3f9      	bcc.n	800099a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a6:	4a09      	ldr	r2, [pc, #36]	; (80009cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009a8:	4c09      	ldr	r4, [pc, #36]	; (80009d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ac:	e001      	b.n	80009b2 <LoopFillZerobss>

080009ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b0:	3204      	adds	r2, #4

080009b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b4:	d3fb      	bcc.n	80009ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009b6:	f002 f939 	bl	8002c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ba:	f7ff fd85 	bl	80004c8 <main>
  bx lr
 80009be:	4770      	bx	lr
  ldr r0, =_sdata
 80009c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80009c8:	08003590 	.word	0x08003590
  ldr r2, =_sbss
 80009cc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80009d0:	2000016c 	.word	0x2000016c

080009d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC1_2_IRQHandler>
	...

080009d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <HAL_Init+0x28>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <HAL_Init+0x28>)
 80009e2:	f043 0310 	orr.w	r3, r3, #16
 80009e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e8:	2003      	movs	r0, #3
 80009ea:	f000 fb35 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ee:	200f      	movs	r0, #15
 80009f0:	f000 f808 	bl	8000a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f4:	f7ff fe9c 	bl	8000730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40022000 	.word	0x40022000

08000a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <HAL_InitTick+0x54>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <HAL_InitTick+0x58>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	4619      	mov	r1, r3
 8000a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 fb4d 	bl	80010c2 <HAL_SYSTICK_Config>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e00e      	b.n	8000a50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2b0f      	cmp	r3, #15
 8000a36:	d80a      	bhi.n	8000a4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	6879      	ldr	r1, [r7, #4]
 8000a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a40:	f000 fb15 	bl	800106e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a44:	4a06      	ldr	r2, [pc, #24]	; (8000a60 <HAL_InitTick+0x5c>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	e000      	b.n	8000a50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000004 	.word	0x20000004
 8000a5c:	2000000c 	.word	0x2000000c
 8000a60:	20000008 	.word	0x20000008

08000a64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <HAL_IncTick+0x1c>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HAL_IncTick+0x20>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4413      	add	r3, r2
 8000a74:	4a03      	ldr	r2, [pc, #12]	; (8000a84 <HAL_IncTick+0x20>)
 8000a76:	6013      	str	r3, [r2, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	2000000c 	.word	0x2000000c
 8000a84:	20000158 	.word	0x20000158

08000a88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a8c:	4b02      	ldr	r3, [pc, #8]	; (8000a98 <HAL_GetTick+0x10>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	20000158 	.word	0x20000158

08000a9c <HAL_ADC_Init>:
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	75fb      	strb	r3, [r7, #23]
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	2300      	movs	r3, #0
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d101      	bne.n	8000abe <HAL_ADC_Init+0x22>
 8000aba:	2301      	movs	r3, #1
 8000abc:	e0be      	b.n	8000c3c <HAL_ADC_Init+0x1a0>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d109      	bne.n	8000ae0 <HAL_ADC_Init+0x44>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f7ff fe5a 	bl	8000794 <HAL_ADC_MspInit>
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f000 f9ab 	bl	8000e3c <ADC_ConversionStop_Disable>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	75fb      	strb	r3, [r7, #23]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aee:	f003 0310 	and.w	r3, r3, #16
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	f040 8099 	bne.w	8000c2a <HAL_ADC_Init+0x18e>
 8000af8:	7dfb      	ldrb	r3, [r7, #23]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f040 8095 	bne.w	8000c2a <HAL_ADC_Init+0x18e>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b04:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b08:	f023 0302 	bic.w	r3, r3, #2
 8000b0c:	f043 0202 	orr.w	r2, r3, #2
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	629a      	str	r2, [r3, #40]	; 0x28
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	69db      	ldr	r3, [r3, #28]
 8000b1c:	431a      	orrs	r2, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	7b1b      	ldrb	r3, [r3, #12]
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	4313      	orrs	r3, r2
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b34:	d003      	beq.n	8000b3e <HAL_ADC_Init+0xa2>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d102      	bne.n	8000b44 <HAL_ADC_Init+0xa8>
 8000b3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b42:	e000      	b.n	8000b46 <HAL_ADC_Init+0xaa>
 8000b44:	2300      	movs	r3, #0
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	7d1b      	ldrb	r3, [r3, #20]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d119      	bne.n	8000b88 <HAL_ADC_Init+0xec>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	7b1b      	ldrb	r3, [r3, #12]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d109      	bne.n	8000b70 <HAL_ADC_Init+0xd4>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	3b01      	subs	r3, #1
 8000b62:	035a      	lsls	r2, r3, #13
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	e00b      	b.n	8000b88 <HAL_ADC_Init+0xec>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b74:	f043 0220 	orr.w	r2, r3, #32
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	629a      	str	r2, [r3, #40]	; 0x28
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b80:	f043 0201 	orr.w	r2, r3, #1
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	689a      	ldr	r2, [r3, #8]
 8000ba2:	4b28      	ldr	r3, [pc, #160]	; (8000c44 <HAL_ADC_Init+0x1a8>)
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	6812      	ldr	r2, [r2, #0]
 8000baa:	68b9      	ldr	r1, [r7, #8]
 8000bac:	430b      	orrs	r3, r1
 8000bae:	6093      	str	r3, [r2, #8]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bb8:	d003      	beq.n	8000bc2 <HAL_ADC_Init+0x126>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d104      	bne.n	8000bcc <HAL_ADC_Init+0x130>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	691b      	ldr	r3, [r3, #16]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	051b      	lsls	r3, r3, #20
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	62da      	str	r2, [r3, #44]	; 0x2c
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <HAL_ADC_Init+0x1ac>)
 8000be8:	4013      	ands	r3, r2
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d10b      	bne.n	8000c08 <HAL_ADC_Init+0x16c>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfa:	f023 0303 	bic.w	r3, r3, #3
 8000bfe:	f043 0201 	orr.w	r2, r3, #1
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	629a      	str	r2, [r3, #40]	; 0x28
 8000c06:	e018      	b.n	8000c3a <HAL_ADC_Init+0x19e>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0c:	f023 0312 	bic.w	r3, r3, #18
 8000c10:	f043 0210 	orr.w	r2, r3, #16
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	629a      	str	r2, [r3, #40]	; 0x28
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c1c:	f043 0201 	orr.w	r2, r3, #1
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c24:	2301      	movs	r3, #1
 8000c26:	75fb      	strb	r3, [r7, #23]
 8000c28:	e007      	b.n	8000c3a <HAL_ADC_Init+0x19e>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2e:	f043 0210 	orr.w	r2, r3, #16
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	629a      	str	r2, [r3, #40]	; 0x28
 8000c36:	2301      	movs	r3, #1
 8000c38:	75fb      	strb	r3, [r7, #23]
 8000c3a:	7dfb      	ldrb	r3, [r7, #23]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	ffe1f7fd 	.word	0xffe1f7fd
 8000c48:	ff1f0efe 	.word	0xff1f0efe

08000c4c <HAL_ADC_ConfigChannel>:
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	2300      	movs	r3, #0
 8000c58:	73fb      	strb	r3, [r7, #15]
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d101      	bne.n	8000c6c <HAL_ADC_ConfigChannel+0x20>
 8000c68:	2302      	movs	r3, #2
 8000c6a:	e0dc      	b.n	8000e26 <HAL_ADC_ConfigChannel+0x1da>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	2b06      	cmp	r3, #6
 8000c7a:	d81c      	bhi.n	8000cb6 <HAL_ADC_ConfigChannel+0x6a>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	4613      	mov	r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	4413      	add	r3, r2
 8000c8c:	3b05      	subs	r3, #5
 8000c8e:	221f      	movs	r2, #31
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	4019      	ands	r1, r3
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	6818      	ldr	r0, [r3, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685a      	ldr	r2, [r3, #4]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	4413      	add	r3, r2
 8000ca6:	3b05      	subs	r3, #5
 8000ca8:	fa00 f203 	lsl.w	r2, r0, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	635a      	str	r2, [r3, #52]	; 0x34
 8000cb4:	e03c      	b.n	8000d30 <HAL_ADC_ConfigChannel+0xe4>
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2b0c      	cmp	r3, #12
 8000cbc:	d81c      	bhi.n	8000cf8 <HAL_ADC_ConfigChannel+0xac>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685a      	ldr	r2, [r3, #4]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	3b23      	subs	r3, #35	; 0x23
 8000cd0:	221f      	movs	r2, #31
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	4019      	ands	r1, r3
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	6818      	ldr	r0, [r3, #0]
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685a      	ldr	r2, [r3, #4]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	4413      	add	r3, r2
 8000ce8:	3b23      	subs	r3, #35	; 0x23
 8000cea:	fa00 f203 	lsl.w	r2, r0, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	631a      	str	r2, [r3, #48]	; 0x30
 8000cf6:	e01b      	b.n	8000d30 <HAL_ADC_ConfigChannel+0xe4>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	4613      	mov	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4413      	add	r3, r2
 8000d08:	3b41      	subs	r3, #65	; 0x41
 8000d0a:	221f      	movs	r2, #31
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	4019      	ands	r1, r3
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	6818      	ldr	r0, [r3, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685a      	ldr	r2, [r3, #4]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	3b41      	subs	r3, #65	; 0x41
 8000d24:	fa00 f203 	lsl.w	r2, r0, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b09      	cmp	r3, #9
 8000d36:	d91c      	bls.n	8000d72 <HAL_ADC_ConfigChannel+0x126>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	68d9      	ldr	r1, [r3, #12]
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4613      	mov	r3, r2
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	4413      	add	r3, r2
 8000d48:	3b1e      	subs	r3, #30
 8000d4a:	2207      	movs	r2, #7
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	4019      	ands	r1, r3
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	6898      	ldr	r0, [r3, #8]
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	4413      	add	r3, r2
 8000d62:	3b1e      	subs	r3, #30
 8000d64:	fa00 f203 	lsl.w	r2, r0, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	60da      	str	r2, [r3, #12]
 8000d70:	e019      	b.n	8000da6 <HAL_ADC_ConfigChannel+0x15a>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	6919      	ldr	r1, [r3, #16]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	4413      	add	r3, r2
 8000d82:	2207      	movs	r2, #7
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	4019      	ands	r1, r3
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	6898      	ldr	r0, [r3, #8]
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4613      	mov	r3, r2
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	4413      	add	r3, r2
 8000d9a:	fa00 f203 	lsl.w	r2, r0, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	430a      	orrs	r2, r1
 8000da4:	611a      	str	r2, [r3, #16]
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b10      	cmp	r3, #16
 8000dac:	d003      	beq.n	8000db6 <HAL_ADC_ConfigChannel+0x16a>
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2b11      	cmp	r3, #17
 8000db4:	d132      	bne.n	8000e1c <HAL_ADC_ConfigChannel+0x1d0>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a1d      	ldr	r2, [pc, #116]	; (8000e30 <HAL_ADC_ConfigChannel+0x1e4>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d125      	bne.n	8000e0c <HAL_ADC_ConfigChannel+0x1c0>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d126      	bne.n	8000e1c <HAL_ADC_ConfigChannel+0x1d0>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	689a      	ldr	r2, [r3, #8]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b10      	cmp	r3, #16
 8000de4:	d11a      	bne.n	8000e1c <HAL_ADC_ConfigChannel+0x1d0>
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <HAL_ADC_ConfigChannel+0x1e8>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a13      	ldr	r2, [pc, #76]	; (8000e38 <HAL_ADC_ConfigChannel+0x1ec>)
 8000dec:	fba2 2303 	umull	r2, r3, r2, r3
 8000df0:	0c9a      	lsrs	r2, r3, #18
 8000df2:	4613      	mov	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4413      	add	r3, r2
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	e002      	b.n	8000e04 <HAL_ADC_ConfigChannel+0x1b8>
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	3b01      	subs	r3, #1
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1f9      	bne.n	8000dfe <HAL_ADC_ConfigChannel+0x1b2>
 8000e0a:	e007      	b.n	8000e1c <HAL_ADC_ConfigChannel+0x1d0>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e10:	f043 0220 	orr.w	r2, r3, #32
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	629a      	str	r2, [r3, #40]	; 0x28
 8000e18:	2301      	movs	r3, #1
 8000e1a:	73fb      	strb	r3, [r7, #15]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	4618      	mov	r0, r3
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	40012400 	.word	0x40012400
 8000e34:	20000004 	.word	0x20000004
 8000e38:	431bde83 	.word	0x431bde83

08000e3c <ADC_ConversionStop_Disable>:
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d12e      	bne.n	8000eb4 <ADC_ConversionStop_Disable+0x78>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	689a      	ldr	r2, [r3, #8]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f022 0201 	bic.w	r2, r2, #1
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	f7ff fe0f 	bl	8000a88 <HAL_GetTick>
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	e01b      	b.n	8000ea6 <ADC_ConversionStop_Disable+0x6a>
 8000e6e:	f7ff fe0b 	bl	8000a88 <HAL_GetTick>
 8000e72:	4602      	mov	r2, r0
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d914      	bls.n	8000ea6 <ADC_ConversionStop_Disable+0x6a>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d10d      	bne.n	8000ea6 <ADC_ConversionStop_Disable+0x6a>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8e:	f043 0210 	orr.w	r2, r3, #16
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	629a      	str	r2, [r3, #40]	; 0x28
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9a:	f043 0201 	orr.w	r2, r3, #1
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e007      	b.n	8000eb6 <ADC_ConversionStop_Disable+0x7a>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d0dc      	beq.n	8000e6e <ADC_ConversionStop_Disable+0x32>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	60d3      	str	r3, [r2, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <__NVIC_GetPriorityGrouping+0x18>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	f003 0307 	and.w	r3, r3, #7
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	db0b      	blt.n	8000f4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	f003 021f 	and.w	r2, r3, #31
 8000f3c:	4906      	ldr	r1, [pc, #24]	; (8000f58 <__NVIC_EnableIRQ+0x34>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	095b      	lsrs	r3, r3, #5
 8000f44:	2001      	movs	r0, #1
 8000f46:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	e000e100 	.word	0xe000e100

08000f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	db0a      	blt.n	8000f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <__NVIC_SetPriority+0x4c>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	440b      	add	r3, r1
 8000f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f84:	e00a      	b.n	8000f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4908      	ldr	r1, [pc, #32]	; (8000fac <__NVIC_SetPriority+0x50>)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	3b04      	subs	r3, #4
 8000f94:	0112      	lsls	r2, r2, #4
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	440b      	add	r3, r1
 8000f9a:	761a      	strb	r2, [r3, #24]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000e100 	.word	0xe000e100
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f1c3 0307 	rsb	r3, r3, #7
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	bf28      	it	cs
 8000fce:	2304      	movcs	r3, #4
 8000fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d902      	bls.n	8000fe0 <NVIC_EncodePriority+0x30>
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3b03      	subs	r3, #3
 8000fde:	e000      	b.n	8000fe2 <NVIC_EncodePriority+0x32>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	43d9      	mvns	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	4313      	orrs	r3, r2
         );
}
 800100a:	4618      	mov	r0, r3
 800100c:	3724      	adds	r7, #36	; 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001024:	d301      	bcc.n	800102a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001026:	2301      	movs	r3, #1
 8001028:	e00f      	b.n	800104a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <SysTick_Config+0x40>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001032:	210f      	movs	r1, #15
 8001034:	f04f 30ff 	mov.w	r0, #4294967295
 8001038:	f7ff ff90 	bl	8000f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <SysTick_Config+0x40>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001042:	4b04      	ldr	r3, [pc, #16]	; (8001054 <SysTick_Config+0x40>)
 8001044:	2207      	movs	r2, #7
 8001046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	e000e010 	.word	0xe000e010

08001058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ff2d 	bl	8000ec0 <__NVIC_SetPriorityGrouping>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001080:	f7ff ff42 	bl	8000f08 <__NVIC_GetPriorityGrouping>
 8001084:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	6978      	ldr	r0, [r7, #20]
 800108c:	f7ff ff90 	bl	8000fb0 <NVIC_EncodePriority>
 8001090:	4602      	mov	r2, r0
 8001092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001096:	4611      	mov	r1, r2
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff5f 	bl	8000f5c <__NVIC_SetPriority>
}
 800109e:	bf00      	nop
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff35 	bl	8000f24 <__NVIC_EnableIRQ>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ffa2 	bl	8001014 <SysTick_Config>
 80010d0:	4603      	mov	r3, r0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010da:	b480      	push	{r7}
 80010dc:	b085      	sub	sp, #20
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d008      	beq.n	8001104 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2204      	movs	r2, #4
 80010f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e020      	b.n	8001146 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 020e 	bic.w	r2, r2, #14
 8001112:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0201 	bic.w	r2, r2, #1
 8001122:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800112c:	2101      	movs	r1, #1
 800112e:	fa01 f202 	lsl.w	r2, r1, r2
 8001132:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2201      	movs	r2, #1
 8001138:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001144:	7bfb      	ldrb	r3, [r7, #15]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001158:	2300      	movs	r3, #0
 800115a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d005      	beq.n	8001174 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2204      	movs	r2, #4
 800116c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	73fb      	strb	r3, [r7, #15]
 8001172:	e051      	b.n	8001218 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 020e 	bic.w	r2, r2, #14
 8001182:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0201 	bic.w	r2, r2, #1
 8001192:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a22      	ldr	r2, [pc, #136]	; (8001224 <HAL_DMA_Abort_IT+0xd4>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d029      	beq.n	80011f2 <HAL_DMA_Abort_IT+0xa2>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a21      	ldr	r2, [pc, #132]	; (8001228 <HAL_DMA_Abort_IT+0xd8>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d022      	beq.n	80011ee <HAL_DMA_Abort_IT+0x9e>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a1f      	ldr	r2, [pc, #124]	; (800122c <HAL_DMA_Abort_IT+0xdc>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d01a      	beq.n	80011e8 <HAL_DMA_Abort_IT+0x98>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a1e      	ldr	r2, [pc, #120]	; (8001230 <HAL_DMA_Abort_IT+0xe0>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d012      	beq.n	80011e2 <HAL_DMA_Abort_IT+0x92>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a1c      	ldr	r2, [pc, #112]	; (8001234 <HAL_DMA_Abort_IT+0xe4>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d00a      	beq.n	80011dc <HAL_DMA_Abort_IT+0x8c>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a1b      	ldr	r2, [pc, #108]	; (8001238 <HAL_DMA_Abort_IT+0xe8>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d102      	bne.n	80011d6 <HAL_DMA_Abort_IT+0x86>
 80011d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011d4:	e00e      	b.n	80011f4 <HAL_DMA_Abort_IT+0xa4>
 80011d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011da:	e00b      	b.n	80011f4 <HAL_DMA_Abort_IT+0xa4>
 80011dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e0:	e008      	b.n	80011f4 <HAL_DMA_Abort_IT+0xa4>
 80011e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e6:	e005      	b.n	80011f4 <HAL_DMA_Abort_IT+0xa4>
 80011e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ec:	e002      	b.n	80011f4 <HAL_DMA_Abort_IT+0xa4>
 80011ee:	2310      	movs	r3, #16
 80011f0:	e000      	b.n	80011f4 <HAL_DMA_Abort_IT+0xa4>
 80011f2:	2301      	movs	r3, #1
 80011f4:	4a11      	ldr	r2, [pc, #68]	; (800123c <HAL_DMA_Abort_IT+0xec>)
 80011f6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	4798      	blx	r3
    } 
  }
  return status;
 8001218:	7bfb      	ldrb	r3, [r7, #15]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40020008 	.word	0x40020008
 8001228:	4002001c 	.word	0x4002001c
 800122c:	40020030 	.word	0x40020030
 8001230:	40020044 	.word	0x40020044
 8001234:	40020058 	.word	0x40020058
 8001238:	4002006c 	.word	0x4002006c
 800123c:	40020000 	.word	0x40020000

08001240 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001240:	b480      	push	{r7}
 8001242:	b08b      	sub	sp, #44	; 0x2c
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001252:	e148      	b.n	80014e6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001254:	2201      	movs	r2, #1
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	69fa      	ldr	r2, [r7, #28]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	429a      	cmp	r2, r3
 800126e:	f040 8137 	bne.w	80014e0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	4aa3      	ldr	r2, [pc, #652]	; (8001504 <HAL_GPIO_Init+0x2c4>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d05e      	beq.n	800133a <HAL_GPIO_Init+0xfa>
 800127c:	4aa1      	ldr	r2, [pc, #644]	; (8001504 <HAL_GPIO_Init+0x2c4>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d875      	bhi.n	800136e <HAL_GPIO_Init+0x12e>
 8001282:	4aa1      	ldr	r2, [pc, #644]	; (8001508 <HAL_GPIO_Init+0x2c8>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d058      	beq.n	800133a <HAL_GPIO_Init+0xfa>
 8001288:	4a9f      	ldr	r2, [pc, #636]	; (8001508 <HAL_GPIO_Init+0x2c8>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d86f      	bhi.n	800136e <HAL_GPIO_Init+0x12e>
 800128e:	4a9f      	ldr	r2, [pc, #636]	; (800150c <HAL_GPIO_Init+0x2cc>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d052      	beq.n	800133a <HAL_GPIO_Init+0xfa>
 8001294:	4a9d      	ldr	r2, [pc, #628]	; (800150c <HAL_GPIO_Init+0x2cc>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d869      	bhi.n	800136e <HAL_GPIO_Init+0x12e>
 800129a:	4a9d      	ldr	r2, [pc, #628]	; (8001510 <HAL_GPIO_Init+0x2d0>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d04c      	beq.n	800133a <HAL_GPIO_Init+0xfa>
 80012a0:	4a9b      	ldr	r2, [pc, #620]	; (8001510 <HAL_GPIO_Init+0x2d0>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d863      	bhi.n	800136e <HAL_GPIO_Init+0x12e>
 80012a6:	4a9b      	ldr	r2, [pc, #620]	; (8001514 <HAL_GPIO_Init+0x2d4>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d046      	beq.n	800133a <HAL_GPIO_Init+0xfa>
 80012ac:	4a99      	ldr	r2, [pc, #612]	; (8001514 <HAL_GPIO_Init+0x2d4>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d85d      	bhi.n	800136e <HAL_GPIO_Init+0x12e>
 80012b2:	2b12      	cmp	r3, #18
 80012b4:	d82a      	bhi.n	800130c <HAL_GPIO_Init+0xcc>
 80012b6:	2b12      	cmp	r3, #18
 80012b8:	d859      	bhi.n	800136e <HAL_GPIO_Init+0x12e>
 80012ba:	a201      	add	r2, pc, #4	; (adr r2, 80012c0 <HAL_GPIO_Init+0x80>)
 80012bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c0:	0800133b 	.word	0x0800133b
 80012c4:	08001315 	.word	0x08001315
 80012c8:	08001327 	.word	0x08001327
 80012cc:	08001369 	.word	0x08001369
 80012d0:	0800136f 	.word	0x0800136f
 80012d4:	0800136f 	.word	0x0800136f
 80012d8:	0800136f 	.word	0x0800136f
 80012dc:	0800136f 	.word	0x0800136f
 80012e0:	0800136f 	.word	0x0800136f
 80012e4:	0800136f 	.word	0x0800136f
 80012e8:	0800136f 	.word	0x0800136f
 80012ec:	0800136f 	.word	0x0800136f
 80012f0:	0800136f 	.word	0x0800136f
 80012f4:	0800136f 	.word	0x0800136f
 80012f8:	0800136f 	.word	0x0800136f
 80012fc:	0800136f 	.word	0x0800136f
 8001300:	0800136f 	.word	0x0800136f
 8001304:	0800131d 	.word	0x0800131d
 8001308:	08001331 	.word	0x08001331
 800130c:	4a82      	ldr	r2, [pc, #520]	; (8001518 <HAL_GPIO_Init+0x2d8>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d013      	beq.n	800133a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001312:	e02c      	b.n	800136e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	623b      	str	r3, [r7, #32]
          break;
 800131a:	e029      	b.n	8001370 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	3304      	adds	r3, #4
 8001322:	623b      	str	r3, [r7, #32]
          break;
 8001324:	e024      	b.n	8001370 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	3308      	adds	r3, #8
 800132c:	623b      	str	r3, [r7, #32]
          break;
 800132e:	e01f      	b.n	8001370 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	330c      	adds	r3, #12
 8001336:	623b      	str	r3, [r7, #32]
          break;
 8001338:	e01a      	b.n	8001370 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d102      	bne.n	8001348 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001342:	2304      	movs	r3, #4
 8001344:	623b      	str	r3, [r7, #32]
          break;
 8001346:	e013      	b.n	8001370 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d105      	bne.n	800135c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001350:	2308      	movs	r3, #8
 8001352:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69fa      	ldr	r2, [r7, #28]
 8001358:	611a      	str	r2, [r3, #16]
          break;
 800135a:	e009      	b.n	8001370 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800135c:	2308      	movs	r3, #8
 800135e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	615a      	str	r2, [r3, #20]
          break;
 8001366:	e003      	b.n	8001370 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
          break;
 800136c:	e000      	b.n	8001370 <HAL_GPIO_Init+0x130>
          break;
 800136e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	2bff      	cmp	r3, #255	; 0xff
 8001374:	d801      	bhi.n	800137a <HAL_GPIO_Init+0x13a>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	e001      	b.n	800137e <HAL_GPIO_Init+0x13e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3304      	adds	r3, #4
 800137e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	2bff      	cmp	r3, #255	; 0xff
 8001384:	d802      	bhi.n	800138c <HAL_GPIO_Init+0x14c>
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	e002      	b.n	8001392 <HAL_GPIO_Init+0x152>
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	3b08      	subs	r3, #8
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	210f      	movs	r1, #15
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	fa01 f303 	lsl.w	r3, r1, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	401a      	ands	r2, r3
 80013a4:	6a39      	ldr	r1, [r7, #32]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ac:	431a      	orrs	r2, r3
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 8090 	beq.w	80014e0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013c0:	4b56      	ldr	r3, [pc, #344]	; (800151c <HAL_GPIO_Init+0x2dc>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	4a55      	ldr	r2, [pc, #340]	; (800151c <HAL_GPIO_Init+0x2dc>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6193      	str	r3, [r2, #24]
 80013cc:	4b53      	ldr	r3, [pc, #332]	; (800151c <HAL_GPIO_Init+0x2dc>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013d8:	4a51      	ldr	r2, [pc, #324]	; (8001520 <HAL_GPIO_Init+0x2e0>)
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	089b      	lsrs	r3, r3, #2
 80013de:	3302      	adds	r3, #2
 80013e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	220f      	movs	r2, #15
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	4013      	ands	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a49      	ldr	r2, [pc, #292]	; (8001524 <HAL_GPIO_Init+0x2e4>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d00d      	beq.n	8001420 <HAL_GPIO_Init+0x1e0>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a48      	ldr	r2, [pc, #288]	; (8001528 <HAL_GPIO_Init+0x2e8>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d007      	beq.n	800141c <HAL_GPIO_Init+0x1dc>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a47      	ldr	r2, [pc, #284]	; (800152c <HAL_GPIO_Init+0x2ec>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d101      	bne.n	8001418 <HAL_GPIO_Init+0x1d8>
 8001414:	2302      	movs	r3, #2
 8001416:	e004      	b.n	8001422 <HAL_GPIO_Init+0x1e2>
 8001418:	2303      	movs	r3, #3
 800141a:	e002      	b.n	8001422 <HAL_GPIO_Init+0x1e2>
 800141c:	2301      	movs	r3, #1
 800141e:	e000      	b.n	8001422 <HAL_GPIO_Init+0x1e2>
 8001420:	2300      	movs	r3, #0
 8001422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001424:	f002 0203 	and.w	r2, r2, #3
 8001428:	0092      	lsls	r2, r2, #2
 800142a:	4093      	lsls	r3, r2
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001432:	493b      	ldr	r1, [pc, #236]	; (8001520 <HAL_GPIO_Init+0x2e0>)
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	089b      	lsrs	r3, r3, #2
 8001438:	3302      	adds	r3, #2
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d006      	beq.n	800145a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800144c:	4b38      	ldr	r3, [pc, #224]	; (8001530 <HAL_GPIO_Init+0x2f0>)
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	4937      	ldr	r1, [pc, #220]	; (8001530 <HAL_GPIO_Init+0x2f0>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	608b      	str	r3, [r1, #8]
 8001458:	e006      	b.n	8001468 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800145a:	4b35      	ldr	r3, [pc, #212]	; (8001530 <HAL_GPIO_Init+0x2f0>)
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	43db      	mvns	r3, r3
 8001462:	4933      	ldr	r1, [pc, #204]	; (8001530 <HAL_GPIO_Init+0x2f0>)
 8001464:	4013      	ands	r3, r2
 8001466:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d006      	beq.n	8001482 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001474:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <HAL_GPIO_Init+0x2f0>)
 8001476:	68da      	ldr	r2, [r3, #12]
 8001478:	492d      	ldr	r1, [pc, #180]	; (8001530 <HAL_GPIO_Init+0x2f0>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	60cb      	str	r3, [r1, #12]
 8001480:	e006      	b.n	8001490 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001482:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <HAL_GPIO_Init+0x2f0>)
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	43db      	mvns	r3, r3
 800148a:	4929      	ldr	r1, [pc, #164]	; (8001530 <HAL_GPIO_Init+0x2f0>)
 800148c:	4013      	ands	r3, r2
 800148e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d006      	beq.n	80014aa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800149c:	4b24      	ldr	r3, [pc, #144]	; (8001530 <HAL_GPIO_Init+0x2f0>)
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	4923      	ldr	r1, [pc, #140]	; (8001530 <HAL_GPIO_Init+0x2f0>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	604b      	str	r3, [r1, #4]
 80014a8:	e006      	b.n	80014b8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014aa:	4b21      	ldr	r3, [pc, #132]	; (8001530 <HAL_GPIO_Init+0x2f0>)
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	491f      	ldr	r1, [pc, #124]	; (8001530 <HAL_GPIO_Init+0x2f0>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d006      	beq.n	80014d2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014c4:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <HAL_GPIO_Init+0x2f0>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4919      	ldr	r1, [pc, #100]	; (8001530 <HAL_GPIO_Init+0x2f0>)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	600b      	str	r3, [r1, #0]
 80014d0:	e006      	b.n	80014e0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <HAL_GPIO_Init+0x2f0>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	43db      	mvns	r3, r3
 80014da:	4915      	ldr	r1, [pc, #84]	; (8001530 <HAL_GPIO_Init+0x2f0>)
 80014dc:	4013      	ands	r3, r2
 80014de:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	3301      	adds	r3, #1
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	fa22 f303 	lsr.w	r3, r2, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f47f aeaf 	bne.w	8001254 <HAL_GPIO_Init+0x14>
  }
}
 80014f6:	bf00      	nop
 80014f8:	bf00      	nop
 80014fa:	372c      	adds	r7, #44	; 0x2c
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	10320000 	.word	0x10320000
 8001508:	10310000 	.word	0x10310000
 800150c:	10220000 	.word	0x10220000
 8001510:	10210000 	.word	0x10210000
 8001514:	10120000 	.word	0x10120000
 8001518:	10110000 	.word	0x10110000
 800151c:	40021000 	.word	0x40021000
 8001520:	40010000 	.word	0x40010000
 8001524:	40010800 	.word	0x40010800
 8001528:	40010c00 	.word	0x40010c00
 800152c:	40011000 	.word	0x40011000
 8001530:	40010400 	.word	0x40010400

08001534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	807b      	strh	r3, [r7, #2]
 8001540:	4613      	mov	r3, r2
 8001542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001544:	787b      	ldrb	r3, [r7, #1]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800154a:	887a      	ldrh	r2, [r7, #2]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001550:	e003      	b.n	800155a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001552:	887b      	ldrh	r3, [r7, #2]
 8001554:	041a      	lsls	r2, r3, #16
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	611a      	str	r2, [r3, #16]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001576:	887a      	ldrh	r2, [r7, #2]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4013      	ands	r3, r2
 800157c:	041a      	lsls	r2, r3, #16
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	43d9      	mvns	r1, r3
 8001582:	887b      	ldrh	r3, [r7, #2]
 8001584:	400b      	ands	r3, r1
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	611a      	str	r2, [r3, #16]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
	...

08001598 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e26c      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 8087 	beq.w	80016c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015b8:	4b92      	ldr	r3, [pc, #584]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 030c 	and.w	r3, r3, #12
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d00c      	beq.n	80015de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015c4:	4b8f      	ldr	r3, [pc, #572]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 030c 	and.w	r3, r3, #12
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	d112      	bne.n	80015f6 <HAL_RCC_OscConfig+0x5e>
 80015d0:	4b8c      	ldr	r3, [pc, #560]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015dc:	d10b      	bne.n	80015f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015de:	4b89      	ldr	r3, [pc, #548]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d06c      	beq.n	80016c4 <HAL_RCC_OscConfig+0x12c>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d168      	bne.n	80016c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e246      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015fe:	d106      	bne.n	800160e <HAL_RCC_OscConfig+0x76>
 8001600:	4b80      	ldr	r3, [pc, #512]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a7f      	ldr	r2, [pc, #508]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	e02e      	b.n	800166c <HAL_RCC_OscConfig+0xd4>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10c      	bne.n	8001630 <HAL_RCC_OscConfig+0x98>
 8001616:	4b7b      	ldr	r3, [pc, #492]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a7a      	ldr	r2, [pc, #488]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800161c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	4b78      	ldr	r3, [pc, #480]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a77      	ldr	r2, [pc, #476]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001628:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e01d      	b.n	800166c <HAL_RCC_OscConfig+0xd4>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001638:	d10c      	bne.n	8001654 <HAL_RCC_OscConfig+0xbc>
 800163a:	4b72      	ldr	r3, [pc, #456]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a71      	ldr	r2, [pc, #452]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	4b6f      	ldr	r3, [pc, #444]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a6e      	ldr	r2, [pc, #440]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800164c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	e00b      	b.n	800166c <HAL_RCC_OscConfig+0xd4>
 8001654:	4b6b      	ldr	r3, [pc, #428]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a6a      	ldr	r2, [pc, #424]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800165a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800165e:	6013      	str	r3, [r2, #0]
 8001660:	4b68      	ldr	r3, [pc, #416]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a67      	ldr	r2, [pc, #412]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800166a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d013      	beq.n	800169c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fa08 	bl	8000a88 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800167c:	f7ff fa04 	bl	8000a88 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b64      	cmp	r3, #100	; 0x64
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e1fa      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168e:	4b5d      	ldr	r3, [pc, #372]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0xe4>
 800169a:	e014      	b.n	80016c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff f9f4 	bl	8000a88 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a4:	f7ff f9f0 	bl	8000a88 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b64      	cmp	r3, #100	; 0x64
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e1e6      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b6:	4b53      	ldr	r3, [pc, #332]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0x10c>
 80016c2:	e000      	b.n	80016c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d063      	beq.n	800179a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016d2:	4b4c      	ldr	r3, [pc, #304]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00b      	beq.n	80016f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016de:	4b49      	ldr	r3, [pc, #292]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 030c 	and.w	r3, r3, #12
 80016e6:	2b08      	cmp	r3, #8
 80016e8:	d11c      	bne.n	8001724 <HAL_RCC_OscConfig+0x18c>
 80016ea:	4b46      	ldr	r3, [pc, #280]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d116      	bne.n	8001724 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f6:	4b43      	ldr	r3, [pc, #268]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <HAL_RCC_OscConfig+0x176>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d001      	beq.n	800170e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e1ba      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170e:	4b3d      	ldr	r3, [pc, #244]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4939      	ldr	r1, [pc, #228]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800171e:	4313      	orrs	r3, r2
 8001720:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001722:	e03a      	b.n	800179a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d020      	beq.n	800176e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800172c:	4b36      	ldr	r3, [pc, #216]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800172e:	2201      	movs	r2, #1
 8001730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001732:	f7ff f9a9 	bl	8000a88 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800173a:	f7ff f9a5 	bl	8000a88 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e19b      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174c:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001758:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	4927      	ldr	r1, [pc, #156]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001768:	4313      	orrs	r3, r2
 800176a:	600b      	str	r3, [r1, #0]
 800176c:	e015      	b.n	800179a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800176e:	4b26      	ldr	r3, [pc, #152]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff f988 	bl	8000a88 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800177c:	f7ff f984 	bl	8000a88 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e17a      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d03a      	beq.n	800181c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d019      	beq.n	80017e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b4:	f7ff f968 	bl	8000a88 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017bc:	f7ff f964 	bl	8000a88 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e15a      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017da:	2001      	movs	r0, #1
 80017dc:	f000 facc 	bl	8001d78 <RCC_Delay>
 80017e0:	e01c      	b.n	800181c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e8:	f7ff f94e 	bl	8000a88 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ee:	e00f      	b.n	8001810 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f0:	f7ff f94a 	bl	8000a88 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d908      	bls.n	8001810 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e140      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000
 8001808:	42420000 	.word	0x42420000
 800180c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001810:	4b9e      	ldr	r3, [pc, #632]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1e9      	bne.n	80017f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 80a6 	beq.w	8001976 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800182a:	2300      	movs	r3, #0
 800182c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800182e:	4b97      	ldr	r3, [pc, #604]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10d      	bne.n	8001856 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	4b94      	ldr	r3, [pc, #592]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	4a93      	ldr	r2, [pc, #588]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001844:	61d3      	str	r3, [r2, #28]
 8001846:	4b91      	ldr	r3, [pc, #580]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001852:	2301      	movs	r3, #1
 8001854:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001856:	4b8e      	ldr	r3, [pc, #568]	; (8001a90 <HAL_RCC_OscConfig+0x4f8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185e:	2b00      	cmp	r3, #0
 8001860:	d118      	bne.n	8001894 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001862:	4b8b      	ldr	r3, [pc, #556]	; (8001a90 <HAL_RCC_OscConfig+0x4f8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a8a      	ldr	r2, [pc, #552]	; (8001a90 <HAL_RCC_OscConfig+0x4f8>)
 8001868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800186e:	f7ff f90b 	bl	8000a88 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001876:	f7ff f907 	bl	8000a88 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b64      	cmp	r3, #100	; 0x64
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e0fd      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001888:	4b81      	ldr	r3, [pc, #516]	; (8001a90 <HAL_RCC_OscConfig+0x4f8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0f0      	beq.n	8001876 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d106      	bne.n	80018aa <HAL_RCC_OscConfig+0x312>
 800189c:	4b7b      	ldr	r3, [pc, #492]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	4a7a      	ldr	r2, [pc, #488]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6213      	str	r3, [r2, #32]
 80018a8:	e02d      	b.n	8001906 <HAL_RCC_OscConfig+0x36e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10c      	bne.n	80018cc <HAL_RCC_OscConfig+0x334>
 80018b2:	4b76      	ldr	r3, [pc, #472]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	4a75      	ldr	r2, [pc, #468]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	6213      	str	r3, [r2, #32]
 80018be:	4b73      	ldr	r3, [pc, #460]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	4a72      	ldr	r2, [pc, #456]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80018c4:	f023 0304 	bic.w	r3, r3, #4
 80018c8:	6213      	str	r3, [r2, #32]
 80018ca:	e01c      	b.n	8001906 <HAL_RCC_OscConfig+0x36e>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2b05      	cmp	r3, #5
 80018d2:	d10c      	bne.n	80018ee <HAL_RCC_OscConfig+0x356>
 80018d4:	4b6d      	ldr	r3, [pc, #436]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	4a6c      	ldr	r2, [pc, #432]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80018da:	f043 0304 	orr.w	r3, r3, #4
 80018de:	6213      	str	r3, [r2, #32]
 80018e0:	4b6a      	ldr	r3, [pc, #424]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	4a69      	ldr	r2, [pc, #420]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	6213      	str	r3, [r2, #32]
 80018ec:	e00b      	b.n	8001906 <HAL_RCC_OscConfig+0x36e>
 80018ee:	4b67      	ldr	r3, [pc, #412]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	4a66      	ldr	r2, [pc, #408]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80018f4:	f023 0301 	bic.w	r3, r3, #1
 80018f8:	6213      	str	r3, [r2, #32]
 80018fa:	4b64      	ldr	r3, [pc, #400]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	4a63      	ldr	r2, [pc, #396]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 8001900:	f023 0304 	bic.w	r3, r3, #4
 8001904:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d015      	beq.n	800193a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190e:	f7ff f8bb 	bl	8000a88 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001914:	e00a      	b.n	800192c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001916:	f7ff f8b7 	bl	8000a88 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	f241 3288 	movw	r2, #5000	; 0x1388
 8001924:	4293      	cmp	r3, r2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e0ab      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192c:	4b57      	ldr	r3, [pc, #348]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0ee      	beq.n	8001916 <HAL_RCC_OscConfig+0x37e>
 8001938:	e014      	b.n	8001964 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193a:	f7ff f8a5 	bl	8000a88 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001940:	e00a      	b.n	8001958 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001942:	f7ff f8a1 	bl	8000a88 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001950:	4293      	cmp	r3, r2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e095      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001958:	4b4c      	ldr	r3, [pc, #304]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1ee      	bne.n	8001942 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001964:	7dfb      	ldrb	r3, [r7, #23]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d105      	bne.n	8001976 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800196a:	4b48      	ldr	r3, [pc, #288]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	4a47      	ldr	r2, [pc, #284]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 8001970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001974:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 8081 	beq.w	8001a82 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001980:	4b42      	ldr	r3, [pc, #264]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 030c 	and.w	r3, r3, #12
 8001988:	2b08      	cmp	r3, #8
 800198a:	d061      	beq.n	8001a50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69db      	ldr	r3, [r3, #28]
 8001990:	2b02      	cmp	r3, #2
 8001992:	d146      	bne.n	8001a22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001994:	4b3f      	ldr	r3, [pc, #252]	; (8001a94 <HAL_RCC_OscConfig+0x4fc>)
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199a:	f7ff f875 	bl	8000a88 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a2:	f7ff f871 	bl	8000a88 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e067      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b4:	4b35      	ldr	r3, [pc, #212]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1f0      	bne.n	80019a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c8:	d108      	bne.n	80019dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019ca:	4b30      	ldr	r3, [pc, #192]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	492d      	ldr	r1, [pc, #180]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019dc:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a19      	ldr	r1, [r3, #32]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	430b      	orrs	r3, r1
 80019ee:	4927      	ldr	r1, [pc, #156]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f4:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <HAL_RCC_OscConfig+0x4fc>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fa:	f7ff f845 	bl	8000a88 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a02:	f7ff f841 	bl	8000a88 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e037      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a14:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x46a>
 8001a20:	e02f      	b.n	8001a82 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a22:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <HAL_RCC_OscConfig+0x4fc>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a28:	f7ff f82e 	bl	8000a88 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a30:	f7ff f82a 	bl	8000a88 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e020      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a42:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x498>
 8001a4e:	e018      	b.n	8001a82 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e013      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_RCC_OscConfig+0x4f4>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d106      	bne.n	8001a7e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d001      	beq.n	8001a82 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40007000 	.word	0x40007000
 8001a94:	42420060 	.word	0x42420060

08001a98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0d0      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aac:	4b6a      	ldr	r3, [pc, #424]	; (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d910      	bls.n	8001adc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aba:	4b67      	ldr	r3, [pc, #412]	; (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 0207 	bic.w	r2, r3, #7
 8001ac2:	4965      	ldr	r1, [pc, #404]	; (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	4b63      	ldr	r3, [pc, #396]	; (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0b8      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d020      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af4:	4b59      	ldr	r3, [pc, #356]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	4a58      	ldr	r2, [pc, #352]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001afa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001afe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b0c:	4b53      	ldr	r3, [pc, #332]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	4a52      	ldr	r2, [pc, #328]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b18:	4b50      	ldr	r3, [pc, #320]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	494d      	ldr	r1, [pc, #308]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d040      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d107      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3e:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d115      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e07f      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d107      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b56:	4b41      	ldr	r3, [pc, #260]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d109      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e073      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b66:	4b3d      	ldr	r3, [pc, #244]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e06b      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b76:	4b39      	ldr	r3, [pc, #228]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f023 0203 	bic.w	r2, r3, #3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4936      	ldr	r1, [pc, #216]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b88:	f7fe ff7e 	bl	8000a88 <HAL_GetTick>
 8001b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8e:	e00a      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b90:	f7fe ff7a 	bl	8000a88 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e053      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba6:	4b2d      	ldr	r3, [pc, #180]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 020c 	and.w	r2, r3, #12
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d1eb      	bne.n	8001b90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb8:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d210      	bcs.n	8001be8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc6:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 0207 	bic.w	r2, r3, #7
 8001bce:	4922      	ldr	r1, [pc, #136]	; (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd6:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e032      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d008      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf4:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	4916      	ldr	r1, [pc, #88]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d009      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	490e      	ldr	r1, [pc, #56]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c26:	f000 f821 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	490a      	ldr	r1, [pc, #40]	; (8001c60 <HAL_RCC_ClockConfig+0x1c8>)
 8001c38:	5ccb      	ldrb	r3, [r1, r3]
 8001c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3e:	4a09      	ldr	r2, [pc, #36]	; (8001c64 <HAL_RCC_ClockConfig+0x1cc>)
 8001c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_RCC_ClockConfig+0x1d0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fedc 	bl	8000a04 <HAL_InitTick>

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40022000 	.word	0x40022000
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	08003528 	.word	0x08003528
 8001c64:	20000004 	.word	0x20000004
 8001c68:	20000008 	.word	0x20000008

08001c6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c86:	4b1e      	ldr	r3, [pc, #120]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d002      	beq.n	8001c9c <HAL_RCC_GetSysClockFreq+0x30>
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	d003      	beq.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x36>
 8001c9a:	e027      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c9c:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c9e:	613b      	str	r3, [r7, #16]
      break;
 8001ca0:	e027      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	0c9b      	lsrs	r3, r3, #18
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	4a17      	ldr	r2, [pc, #92]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cac:	5cd3      	ldrb	r3, [r2, r3]
 8001cae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d010      	beq.n	8001cdc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cba:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	0c5b      	lsrs	r3, r3, #17
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	4a11      	ldr	r2, [pc, #68]	; (8001d0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cc6:	5cd3      	ldrb	r3, [r2, r3]
 8001cc8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a0d      	ldr	r2, [pc, #52]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cce:	fb02 f203 	mul.w	r2, r2, r3
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	e004      	b.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a0c      	ldr	r2, [pc, #48]	; (8001d10 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ce0:	fb02 f303 	mul.w	r3, r2, r3
 8001ce4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	613b      	str	r3, [r7, #16]
      break;
 8001cea:	e002      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cec:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cee:	613b      	str	r3, [r7, #16]
      break;
 8001cf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cf2:	693b      	ldr	r3, [r7, #16]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	371c      	adds	r7, #28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000
 8001d04:	007a1200 	.word	0x007a1200
 8001d08:	08003540 	.word	0x08003540
 8001d0c:	08003550 	.word	0x08003550
 8001d10:	003d0900 	.word	0x003d0900

08001d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d18:	4b02      	ldr	r3, [pc, #8]	; (8001d24 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr
 8001d24:	20000004 	.word	0x20000004

08001d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d2c:	f7ff fff2 	bl	8001d14 <HAL_RCC_GetHCLKFreq>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	0a1b      	lsrs	r3, r3, #8
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	4903      	ldr	r1, [pc, #12]	; (8001d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d3e:	5ccb      	ldrb	r3, [r1, r3]
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	08003538 	.word	0x08003538

08001d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d54:	f7ff ffde 	bl	8001d14 <HAL_RCC_GetHCLKFreq>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	0adb      	lsrs	r3, r3, #11
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	4903      	ldr	r1, [pc, #12]	; (8001d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40021000 	.word	0x40021000
 8001d74:	08003538 	.word	0x08003538

08001d78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d80:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <RCC_Delay+0x34>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <RCC_Delay+0x38>)
 8001d86:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8a:	0a5b      	lsrs	r3, r3, #9
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	fb02 f303 	mul.w	r3, r2, r3
 8001d92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d94:	bf00      	nop
  }
  while (Delay --);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1e5a      	subs	r2, r3, #1
 8001d9a:	60fa      	str	r2, [r7, #12]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f9      	bne.n	8001d94 <RCC_Delay+0x1c>
}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr
 8001dac:	20000004 	.word	0x20000004
 8001db0:	10624dd3 	.word	0x10624dd3

08001db4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d07d      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd4:	4b4f      	ldr	r3, [pc, #316]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10d      	bne.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de0:	4b4c      	ldr	r3, [pc, #304]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	4a4b      	ldr	r2, [pc, #300]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dea:	61d3      	str	r3, [r2, #28]
 8001dec:	4b49      	ldr	r3, [pc, #292]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfc:	4b46      	ldr	r3, [pc, #280]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d118      	bne.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e08:	4b43      	ldr	r3, [pc, #268]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a42      	ldr	r2, [pc, #264]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e14:	f7fe fe38 	bl	8000a88 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1a:	e008      	b.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1c:	f7fe fe34 	bl	8000a88 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b64      	cmp	r3, #100	; 0x64
 8001e28:	d901      	bls.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e06d      	b.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2e:	4b3a      	ldr	r3, [pc, #232]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e3a:	4b36      	ldr	r3, [pc, #216]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e42:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d02e      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d027      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e58:	4b2e      	ldr	r3, [pc, #184]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e60:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e62:	4b2e      	ldr	r3, [pc, #184]	; (8001f1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e68:	4b2c      	ldr	r3, [pc, #176]	; (8001f1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e6e:	4a29      	ldr	r2, [pc, #164]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d014      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7e:	f7fe fe03 	bl	8000a88 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e84:	e00a      	b.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e86:	f7fe fdff 	bl	8000a88 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e036      	b.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0ee      	beq.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ea8:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	4917      	ldr	r1, [pc, #92]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001eba:	7dfb      	ldrb	r3, [r7, #23]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d105      	bne.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec0:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	4a13      	ldr	r2, [pc, #76]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d008      	beq.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ed8:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	490b      	ldr	r1, [pc, #44]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0310 	and.w	r3, r3, #16
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d008      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ef6:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	4904      	ldr	r1, [pc, #16]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40007000 	.word	0x40007000
 8001f1c:	42420440 	.word	0x42420440

08001f20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e042      	b.n	8001fb8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d106      	bne.n	8001f4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7fe fc60 	bl	800080c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2224      	movs	r2, #36	; 0x24
 8001f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 fdcd 	bl	8002b04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	695a      	ldr	r2, [r3, #20]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08a      	sub	sp, #40	; 0x28
 8001fc4:	af02      	add	r7, sp, #8
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	603b      	str	r3, [r7, #0]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b20      	cmp	r3, #32
 8001fde:	d16d      	bne.n	80020bc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <HAL_UART_Transmit+0x2c>
 8001fe6:	88fb      	ldrh	r3, [r7, #6]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e066      	b.n	80020be <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2221      	movs	r2, #33	; 0x21
 8001ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ffe:	f7fe fd43 	bl	8000a88 <HAL_GetTick>
 8002002:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	88fa      	ldrh	r2, [r7, #6]
 8002008:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	88fa      	ldrh	r2, [r7, #6]
 800200e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002018:	d108      	bne.n	800202c <HAL_UART_Transmit+0x6c>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d104      	bne.n	800202c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	61bb      	str	r3, [r7, #24]
 800202a:	e003      	b.n	8002034 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002030:	2300      	movs	r3, #0
 8002032:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002034:	e02a      	b.n	800208c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2200      	movs	r2, #0
 800203e:	2180      	movs	r1, #128	; 0x80
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 fb1d 	bl	8002680 <UART_WaitOnFlagUntilTimeout>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e036      	b.n	80020be <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10b      	bne.n	800206e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002064:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	3302      	adds	r3, #2
 800206a:	61bb      	str	r3, [r7, #24]
 800206c:	e007      	b.n	800207e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	781a      	ldrb	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	3301      	adds	r3, #1
 800207c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002082:	b29b      	uxth	r3, r3
 8002084:	3b01      	subs	r3, #1
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002090:	b29b      	uxth	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1cf      	bne.n	8002036 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2200      	movs	r2, #0
 800209e:	2140      	movs	r1, #64	; 0x40
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 faed 	bl	8002680 <UART_WaitOnFlagUntilTimeout>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e006      	b.n	80020be <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2220      	movs	r2, #32
 80020b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	e000      	b.n	80020be <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80020bc:	2302      	movs	r3, #2
  }
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3720      	adds	r7, #32
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b084      	sub	sp, #16
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	4613      	mov	r3, r2
 80020d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b20      	cmp	r3, #32
 80020de:	d112      	bne.n	8002106 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d002      	beq.n	80020ec <HAL_UART_Receive_IT+0x26>
 80020e6:	88fb      	ldrh	r3, [r7, #6]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e00b      	b.n	8002108 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	461a      	mov	r2, r3
 80020fa:	68b9      	ldr	r1, [r7, #8]
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 fb2d 	bl	800275c <UART_Start_Receive_IT>
 8002102:	4603      	mov	r3, r0
 8002104:	e000      	b.n	8002108 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002106:	2302      	movs	r3, #2
  }
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b0ba      	sub	sp, #232	; 0xe8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002136:	2300      	movs	r3, #0
 8002138:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800213c:	2300      	movs	r3, #0
 800213e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800214e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10f      	bne.n	8002176 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800215a:	f003 0320 	and.w	r3, r3, #32
 800215e:	2b00      	cmp	r3, #0
 8002160:	d009      	beq.n	8002176 <HAL_UART_IRQHandler+0x66>
 8002162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002166:	f003 0320 	and.w	r3, r3, #32
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 fc0a 	bl	8002988 <UART_Receive_IT>
      return;
 8002174:	e25b      	b.n	800262e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002176:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 80de 	beq.w	800233c <HAL_UART_IRQHandler+0x22c>
 8002180:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d106      	bne.n	800219a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800218c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002190:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 80d1 	beq.w	800233c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800219a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00b      	beq.n	80021be <HAL_UART_IRQHandler+0xae>
 80021a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d005      	beq.n	80021be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	f043 0201 	orr.w	r2, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00b      	beq.n	80021e2 <HAL_UART_IRQHandler+0xd2>
 80021ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d005      	beq.n	80021e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	f043 0202 	orr.w	r2, r3, #2
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00b      	beq.n	8002206 <HAL_UART_IRQHandler+0xf6>
 80021ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d005      	beq.n	8002206 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	f043 0204 	orr.w	r2, r3, #4
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d011      	beq.n	8002236 <HAL_UART_IRQHandler+0x126>
 8002212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002216:	f003 0320 	and.w	r3, r3, #32
 800221a:	2b00      	cmp	r3, #0
 800221c:	d105      	bne.n	800222a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800221e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d005      	beq.n	8002236 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	f043 0208 	orr.w	r2, r3, #8
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 81f2 	beq.w	8002624 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002244:	f003 0320 	and.w	r3, r3, #32
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_UART_IRQHandler+0x14e>
 800224c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002250:	f003 0320 	and.w	r3, r3, #32
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 fb95 	bl	8002988 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf14      	ite	ne
 800226c:	2301      	movne	r3, #1
 800226e:	2300      	moveq	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d103      	bne.n	800228a <HAL_UART_IRQHandler+0x17a>
 8002282:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002286:	2b00      	cmp	r3, #0
 8002288:	d04f      	beq.n	800232a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 fa9f 	bl	80027ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229a:	2b00      	cmp	r3, #0
 800229c:	d041      	beq.n	8002322 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	3314      	adds	r3, #20
 80022a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022ac:	e853 3f00 	ldrex	r3, [r3]
 80022b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80022b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	3314      	adds	r3, #20
 80022c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80022ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80022ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80022d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80022da:	e841 2300 	strex	r3, r2, [r1]
 80022de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80022e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1d9      	bne.n	800229e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d013      	beq.n	800231a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f6:	4a7e      	ldr	r2, [pc, #504]	; (80024f0 <HAL_UART_IRQHandler+0x3e0>)
 80022f8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe ff26 	bl	8001150 <HAL_DMA_Abort_IT>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d016      	beq.n	8002338 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002314:	4610      	mov	r0, r2
 8002316:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002318:	e00e      	b.n	8002338 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f99c 	bl	8002658 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002320:	e00a      	b.n	8002338 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f998 	bl	8002658 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002328:	e006      	b.n	8002338 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f994 	bl	8002658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002336:	e175      	b.n	8002624 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002338:	bf00      	nop
    return;
 800233a:	e173      	b.n	8002624 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002340:	2b01      	cmp	r3, #1
 8002342:	f040 814f 	bne.w	80025e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800234a:	f003 0310 	and.w	r3, r3, #16
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 8148 	beq.w	80025e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 8141 	beq.w	80025e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002362:	2300      	movs	r3, #0
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 80b6 	beq.w	80024f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002394:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 8145 	beq.w	8002628 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80023a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80023a6:	429a      	cmp	r2, r3
 80023a8:	f080 813e 	bcs.w	8002628 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80023b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	2b20      	cmp	r3, #32
 80023bc:	f000 8088 	beq.w	80024d0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	330c      	adds	r3, #12
 80023c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023ce:	e853 3f00 	ldrex	r3, [r3]
 80023d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80023d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	330c      	adds	r3, #12
 80023e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80023ec:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80023f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80023f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80023fc:	e841 2300 	strex	r3, r2, [r1]
 8002400:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002404:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1d9      	bne.n	80023c0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	3314      	adds	r3, #20
 8002412:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002416:	e853 3f00 	ldrex	r3, [r3]
 800241a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800241c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800241e:	f023 0301 	bic.w	r3, r3, #1
 8002422:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	3314      	adds	r3, #20
 800242c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002430:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002434:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002436:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002438:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800243c:	e841 2300 	strex	r3, r2, [r1]
 8002440:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002442:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1e1      	bne.n	800240c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	3314      	adds	r3, #20
 800244e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002450:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002452:	e853 3f00 	ldrex	r3, [r3]
 8002456:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800245a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800245e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	3314      	adds	r3, #20
 8002468:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800246c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800246e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002470:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002472:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002474:	e841 2300 	strex	r3, r2, [r1]
 8002478:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800247a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1e3      	bne.n	8002448 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2220      	movs	r2, #32
 8002484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	330c      	adds	r3, #12
 8002494:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002498:	e853 3f00 	ldrex	r3, [r3]
 800249c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800249e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024a0:	f023 0310 	bic.w	r3, r3, #16
 80024a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	330c      	adds	r3, #12
 80024ae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80024b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80024b4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80024b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024ba:	e841 2300 	strex	r3, r2, [r1]
 80024be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80024c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1e3      	bne.n	800248e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fe fe05 	bl	80010da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2202      	movs	r2, #2
 80024d4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024de:	b29b      	uxth	r3, r3
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	4619      	mov	r1, r3
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f8bf 	bl	800266a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80024ec:	e09c      	b.n	8002628 <HAL_UART_IRQHandler+0x518>
 80024ee:	bf00      	nop
 80024f0:	08002893 	.word	0x08002893
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002508:	b29b      	uxth	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 808e 	beq.w	800262c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002510:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 8089 	beq.w	800262c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	330c      	adds	r3, #12
 8002520:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002524:	e853 3f00 	ldrex	r3, [r3]
 8002528:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800252a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800252c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002530:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	330c      	adds	r3, #12
 800253a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800253e:	647a      	str	r2, [r7, #68]	; 0x44
 8002540:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002542:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002544:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002546:	e841 2300 	strex	r3, r2, [r1]
 800254a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800254c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1e3      	bne.n	800251a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	3314      	adds	r3, #20
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	e853 3f00 	ldrex	r3, [r3]
 8002560:	623b      	str	r3, [r7, #32]
   return(result);
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	f023 0301 	bic.w	r3, r3, #1
 8002568:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	3314      	adds	r3, #20
 8002572:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002576:	633a      	str	r2, [r7, #48]	; 0x30
 8002578:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800257a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800257c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800257e:	e841 2300 	strex	r3, r2, [r1]
 8002582:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1e3      	bne.n	8002552 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2220      	movs	r2, #32
 800258e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	330c      	adds	r3, #12
 800259e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	e853 3f00 	ldrex	r3, [r3]
 80025a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f023 0310 	bic.w	r3, r3, #16
 80025ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	330c      	adds	r3, #12
 80025b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80025bc:	61fa      	str	r2, [r7, #28]
 80025be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c0:	69b9      	ldr	r1, [r7, #24]
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	e841 2300 	strex	r3, r2, [r1]
 80025c8:	617b      	str	r3, [r7, #20]
   return(result);
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1e3      	bne.n	8002598 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80025d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80025da:	4619      	mov	r1, r3
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f844 	bl	800266a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025e2:	e023      	b.n	800262c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80025e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d009      	beq.n	8002604 <HAL_UART_IRQHandler+0x4f4>
 80025f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f95c 	bl	80028ba <UART_Transmit_IT>
    return;
 8002602:	e014      	b.n	800262e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00e      	beq.n	800262e <HAL_UART_IRQHandler+0x51e>
 8002610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f99b 	bl	8002958 <UART_EndTransmit_IT>
    return;
 8002622:	e004      	b.n	800262e <HAL_UART_IRQHandler+0x51e>
    return;
 8002624:	bf00      	nop
 8002626:	e002      	b.n	800262e <HAL_UART_IRQHandler+0x51e>
      return;
 8002628:	bf00      	nop
 800262a:	e000      	b.n	800262e <HAL_UART_IRQHandler+0x51e>
      return;
 800262c:	bf00      	nop
  }
}
 800262e:	37e8      	adds	r7, #232	; 0xe8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr

08002646 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	460b      	mov	r3, r1
 8002674:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr

08002680 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b090      	sub	sp, #64	; 0x40
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	4613      	mov	r3, r2
 800268e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002690:	e050      	b.n	8002734 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002698:	d04c      	beq.n	8002734 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800269a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800269c:	2b00      	cmp	r3, #0
 800269e:	d007      	beq.n	80026b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80026a0:	f7fe f9f2 	bl	8000a88 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d241      	bcs.n	8002734 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	330c      	adds	r3, #12
 80026b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ba:	e853 3f00 	ldrex	r3, [r3]
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80026c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	330c      	adds	r3, #12
 80026ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026d0:	637a      	str	r2, [r7, #52]	; 0x34
 80026d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026d8:	e841 2300 	strex	r3, r2, [r1]
 80026dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80026de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1e5      	bne.n	80026b0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	3314      	adds	r3, #20
 80026ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	e853 3f00 	ldrex	r3, [r3]
 80026f2:	613b      	str	r3, [r7, #16]
   return(result);
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	f023 0301 	bic.w	r3, r3, #1
 80026fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	3314      	adds	r3, #20
 8002702:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002704:	623a      	str	r2, [r7, #32]
 8002706:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002708:	69f9      	ldr	r1, [r7, #28]
 800270a:	6a3a      	ldr	r2, [r7, #32]
 800270c:	e841 2300 	strex	r3, r2, [r1]
 8002710:	61bb      	str	r3, [r7, #24]
   return(result);
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1e5      	bne.n	80026e4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2220      	movs	r2, #32
 800271c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e00f      	b.n	8002754 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	4013      	ands	r3, r2
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	429a      	cmp	r2, r3
 8002742:	bf0c      	ite	eq
 8002744:	2301      	moveq	r3, #1
 8002746:	2300      	movne	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	429a      	cmp	r2, r3
 8002750:	d09f      	beq.n	8002692 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3740      	adds	r7, #64	; 0x40
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	4613      	mov	r3, r2
 8002768:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	88fa      	ldrh	r2, [r7, #6]
 8002774:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	88fa      	ldrh	r2, [r7, #6]
 800277a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2222      	movs	r2, #34	; 0x22
 8002786:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d007      	beq.n	80027a2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027a0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695a      	ldr	r2, [r3, #20]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 0201 	orr.w	r2, r2, #1
 80027b0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 0220 	orr.w	r2, r2, #32
 80027c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b095      	sub	sp, #84	; 0x54
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	330c      	adds	r3, #12
 80027dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e0:	e853 3f00 	ldrex	r3, [r3]
 80027e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80027e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	330c      	adds	r3, #12
 80027f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027f6:	643a      	str	r2, [r7, #64]	; 0x40
 80027f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80027fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027fe:	e841 2300 	strex	r3, r2, [r1]
 8002802:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1e5      	bne.n	80027d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	3314      	adds	r3, #20
 8002810:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	e853 3f00 	ldrex	r3, [r3]
 8002818:	61fb      	str	r3, [r7, #28]
   return(result);
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	f023 0301 	bic.w	r3, r3, #1
 8002820:	64bb      	str	r3, [r7, #72]	; 0x48
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	3314      	adds	r3, #20
 8002828:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800282a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800282c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800282e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002832:	e841 2300 	strex	r3, r2, [r1]
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1e5      	bne.n	800280a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	2b01      	cmp	r3, #1
 8002844:	d119      	bne.n	800287a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	330c      	adds	r3, #12
 800284c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	e853 3f00 	ldrex	r3, [r3]
 8002854:	60bb      	str	r3, [r7, #8]
   return(result);
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	f023 0310 	bic.w	r3, r3, #16
 800285c:	647b      	str	r3, [r7, #68]	; 0x44
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	330c      	adds	r3, #12
 8002864:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002866:	61ba      	str	r2, [r7, #24]
 8002868:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286a:	6979      	ldr	r1, [r7, #20]
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	e841 2300 	strex	r3, r2, [r1]
 8002872:	613b      	str	r3, [r7, #16]
   return(result);
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1e5      	bne.n	8002846 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2220      	movs	r2, #32
 800287e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002888:	bf00      	nop
 800288a:	3754      	adds	r7, #84	; 0x54
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr

08002892 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b084      	sub	sp, #16
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f7ff fed3 	bl	8002658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028b2:	bf00      	nop
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b085      	sub	sp, #20
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b21      	cmp	r3, #33	; 0x21
 80028cc:	d13e      	bne.n	800294c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d6:	d114      	bne.n	8002902 <UART_Transmit_IT+0x48>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d110      	bne.n	8002902 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	1c9a      	adds	r2, r3, #2
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	621a      	str	r2, [r3, #32]
 8002900:	e008      	b.n	8002914 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	1c59      	adds	r1, r3, #1
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6211      	str	r1, [r2, #32]
 800290c:	781a      	ldrb	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002918:	b29b      	uxth	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	b29b      	uxth	r3, r3
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	4619      	mov	r1, r3
 8002922:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10f      	bne.n	8002948 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002936:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002946:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002948:	2300      	movs	r3, #0
 800294a:	e000      	b.n	800294e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800294c:	2302      	movs	r3, #2
  }
}
 800294e:	4618      	mov	r0, r3
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800296e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff fe5b 	bl	8002634 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08c      	sub	sp, #48	; 0x30
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b22      	cmp	r3, #34	; 0x22
 800299a:	f040 80ae 	bne.w	8002afa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a6:	d117      	bne.n	80029d8 <UART_Receive_IT+0x50>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d113      	bne.n	80029d8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d0:	1c9a      	adds	r2, r3, #2
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	629a      	str	r2, [r3, #40]	; 0x28
 80029d6:	e026      	b.n	8002a26 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ea:	d007      	beq.n	80029fc <UART_Receive_IT+0x74>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10a      	bne.n	8002a0a <UART_Receive_IT+0x82>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d106      	bne.n	8002a0a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a06:	701a      	strb	r2, [r3, #0]
 8002a08:	e008      	b.n	8002a1c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	4619      	mov	r1, r3
 8002a34:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d15d      	bne.n	8002af6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0220 	bic.w	r2, r2, #32
 8002a48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695a      	ldr	r2, [r3, #20]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0201 	bic.w	r2, r2, #1
 8002a68:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d135      	bne.n	8002aec <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	330c      	adds	r3, #12
 8002a8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	e853 3f00 	ldrex	r3, [r3]
 8002a94:	613b      	str	r3, [r7, #16]
   return(result);
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	f023 0310 	bic.w	r3, r3, #16
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	330c      	adds	r3, #12
 8002aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa6:	623a      	str	r2, [r7, #32]
 8002aa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aaa:	69f9      	ldr	r1, [r7, #28]
 8002aac:	6a3a      	ldr	r2, [r7, #32]
 8002aae:	e841 2300 	strex	r3, r2, [r1]
 8002ab2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1e5      	bne.n	8002a86 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	2b10      	cmp	r3, #16
 8002ac6:	d10a      	bne.n	8002ade <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff fdc0 	bl	800266a <HAL_UARTEx_RxEventCallback>
 8002aea:	e002      	b.n	8002af2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7ff fdaa 	bl	8002646 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002af2:	2300      	movs	r3, #0
 8002af4:	e002      	b.n	8002afc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002af6:	2300      	movs	r3, #0
 8002af8:	e000      	b.n	8002afc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002afa:	2302      	movs	r3, #2
  }
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3730      	adds	r7, #48	; 0x30
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b3e:	f023 030c 	bic.w	r3, r3, #12
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	68b9      	ldr	r1, [r7, #8]
 8002b48:	430b      	orrs	r3, r1
 8002b4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699a      	ldr	r2, [r3, #24]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a2c      	ldr	r2, [pc, #176]	; (8002c18 <UART_SetConfig+0x114>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d103      	bne.n	8002b74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b6c:	f7ff f8f0 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	e002      	b.n	8002b7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b74:	f7ff f8d8 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 8002b78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	009a      	lsls	r2, r3, #2
 8002b84:	441a      	add	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b90:	4a22      	ldr	r2, [pc, #136]	; (8002c1c <UART_SetConfig+0x118>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	0119      	lsls	r1, r3, #4
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009a      	lsls	r2, r3, #2
 8002ba4:	441a      	add	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bb0:	4b1a      	ldr	r3, [pc, #104]	; (8002c1c <UART_SetConfig+0x118>)
 8002bb2:	fba3 0302 	umull	r0, r3, r3, r2
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	2064      	movs	r0, #100	; 0x64
 8002bba:	fb00 f303 	mul.w	r3, r0, r3
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	3332      	adds	r3, #50	; 0x32
 8002bc4:	4a15      	ldr	r2, [pc, #84]	; (8002c1c <UART_SetConfig+0x118>)
 8002bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bd0:	4419      	add	r1, r3
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	009a      	lsls	r2, r3, #2
 8002bdc:	441a      	add	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002be8:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <UART_SetConfig+0x118>)
 8002bea:	fba3 0302 	umull	r0, r3, r3, r2
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	2064      	movs	r0, #100	; 0x64
 8002bf2:	fb00 f303 	mul.w	r3, r0, r3
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	3332      	adds	r3, #50	; 0x32
 8002bfc:	4a07      	ldr	r2, [pc, #28]	; (8002c1c <UART_SetConfig+0x118>)
 8002bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	f003 020f 	and.w	r2, r3, #15
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	440a      	add	r2, r1
 8002c0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c10:	bf00      	nop
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40013800 	.word	0x40013800
 8002c1c:	51eb851f 	.word	0x51eb851f

08002c20 <__errno>:
 8002c20:	4b01      	ldr	r3, [pc, #4]	; (8002c28 <__errno+0x8>)
 8002c22:	6818      	ldr	r0, [r3, #0]
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	20000010 	.word	0x20000010

08002c2c <__libc_init_array>:
 8002c2c:	b570      	push	{r4, r5, r6, lr}
 8002c2e:	2600      	movs	r6, #0
 8002c30:	4d0c      	ldr	r5, [pc, #48]	; (8002c64 <__libc_init_array+0x38>)
 8002c32:	4c0d      	ldr	r4, [pc, #52]	; (8002c68 <__libc_init_array+0x3c>)
 8002c34:	1b64      	subs	r4, r4, r5
 8002c36:	10a4      	asrs	r4, r4, #2
 8002c38:	42a6      	cmp	r6, r4
 8002c3a:	d109      	bne.n	8002c50 <__libc_init_array+0x24>
 8002c3c:	f000 fc5c 	bl	80034f8 <_init>
 8002c40:	2600      	movs	r6, #0
 8002c42:	4d0a      	ldr	r5, [pc, #40]	; (8002c6c <__libc_init_array+0x40>)
 8002c44:	4c0a      	ldr	r4, [pc, #40]	; (8002c70 <__libc_init_array+0x44>)
 8002c46:	1b64      	subs	r4, r4, r5
 8002c48:	10a4      	asrs	r4, r4, #2
 8002c4a:	42a6      	cmp	r6, r4
 8002c4c:	d105      	bne.n	8002c5a <__libc_init_array+0x2e>
 8002c4e:	bd70      	pop	{r4, r5, r6, pc}
 8002c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c54:	4798      	blx	r3
 8002c56:	3601      	adds	r6, #1
 8002c58:	e7ee      	b.n	8002c38 <__libc_init_array+0xc>
 8002c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c5e:	4798      	blx	r3
 8002c60:	3601      	adds	r6, #1
 8002c62:	e7f2      	b.n	8002c4a <__libc_init_array+0x1e>
 8002c64:	08003588 	.word	0x08003588
 8002c68:	08003588 	.word	0x08003588
 8002c6c:	08003588 	.word	0x08003588
 8002c70:	0800358c 	.word	0x0800358c

08002c74 <memset>:
 8002c74:	4603      	mov	r3, r0
 8002c76:	4402      	add	r2, r0
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d100      	bne.n	8002c7e <memset+0xa>
 8002c7c:	4770      	bx	lr
 8002c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c82:	e7f9      	b.n	8002c78 <memset+0x4>

08002c84 <siprintf>:
 8002c84:	b40e      	push	{r1, r2, r3}
 8002c86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c8a:	b500      	push	{lr}
 8002c8c:	b09c      	sub	sp, #112	; 0x70
 8002c8e:	ab1d      	add	r3, sp, #116	; 0x74
 8002c90:	9002      	str	r0, [sp, #8]
 8002c92:	9006      	str	r0, [sp, #24]
 8002c94:	9107      	str	r1, [sp, #28]
 8002c96:	9104      	str	r1, [sp, #16]
 8002c98:	4808      	ldr	r0, [pc, #32]	; (8002cbc <siprintf+0x38>)
 8002c9a:	4909      	ldr	r1, [pc, #36]	; (8002cc0 <siprintf+0x3c>)
 8002c9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ca0:	9105      	str	r1, [sp, #20]
 8002ca2:	6800      	ldr	r0, [r0, #0]
 8002ca4:	a902      	add	r1, sp, #8
 8002ca6:	9301      	str	r3, [sp, #4]
 8002ca8:	f000 f868 	bl	8002d7c <_svfiprintf_r>
 8002cac:	2200      	movs	r2, #0
 8002cae:	9b02      	ldr	r3, [sp, #8]
 8002cb0:	701a      	strb	r2, [r3, #0]
 8002cb2:	b01c      	add	sp, #112	; 0x70
 8002cb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002cb8:	b003      	add	sp, #12
 8002cba:	4770      	bx	lr
 8002cbc:	20000010 	.word	0x20000010
 8002cc0:	ffff0208 	.word	0xffff0208

08002cc4 <__ssputs_r>:
 8002cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cc8:	688e      	ldr	r6, [r1, #8]
 8002cca:	4682      	mov	sl, r0
 8002ccc:	429e      	cmp	r6, r3
 8002cce:	460c      	mov	r4, r1
 8002cd0:	4690      	mov	r8, r2
 8002cd2:	461f      	mov	r7, r3
 8002cd4:	d838      	bhi.n	8002d48 <__ssputs_r+0x84>
 8002cd6:	898a      	ldrh	r2, [r1, #12]
 8002cd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002cdc:	d032      	beq.n	8002d44 <__ssputs_r+0x80>
 8002cde:	6825      	ldr	r5, [r4, #0]
 8002ce0:	6909      	ldr	r1, [r1, #16]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	eba5 0901 	sub.w	r9, r5, r1
 8002ce8:	6965      	ldr	r5, [r4, #20]
 8002cea:	444b      	add	r3, r9
 8002cec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002cf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002cf4:	106d      	asrs	r5, r5, #1
 8002cf6:	429d      	cmp	r5, r3
 8002cf8:	bf38      	it	cc
 8002cfa:	461d      	movcc	r5, r3
 8002cfc:	0553      	lsls	r3, r2, #21
 8002cfe:	d531      	bpl.n	8002d64 <__ssputs_r+0xa0>
 8002d00:	4629      	mov	r1, r5
 8002d02:	f000 fb53 	bl	80033ac <_malloc_r>
 8002d06:	4606      	mov	r6, r0
 8002d08:	b950      	cbnz	r0, 8002d20 <__ssputs_r+0x5c>
 8002d0a:	230c      	movs	r3, #12
 8002d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d10:	f8ca 3000 	str.w	r3, [sl]
 8002d14:	89a3      	ldrh	r3, [r4, #12]
 8002d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d1a:	81a3      	strh	r3, [r4, #12]
 8002d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d20:	464a      	mov	r2, r9
 8002d22:	6921      	ldr	r1, [r4, #16]
 8002d24:	f000 face 	bl	80032c4 <memcpy>
 8002d28:	89a3      	ldrh	r3, [r4, #12]
 8002d2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d32:	81a3      	strh	r3, [r4, #12]
 8002d34:	6126      	str	r6, [r4, #16]
 8002d36:	444e      	add	r6, r9
 8002d38:	6026      	str	r6, [r4, #0]
 8002d3a:	463e      	mov	r6, r7
 8002d3c:	6165      	str	r5, [r4, #20]
 8002d3e:	eba5 0509 	sub.w	r5, r5, r9
 8002d42:	60a5      	str	r5, [r4, #8]
 8002d44:	42be      	cmp	r6, r7
 8002d46:	d900      	bls.n	8002d4a <__ssputs_r+0x86>
 8002d48:	463e      	mov	r6, r7
 8002d4a:	4632      	mov	r2, r6
 8002d4c:	4641      	mov	r1, r8
 8002d4e:	6820      	ldr	r0, [r4, #0]
 8002d50:	f000 fac6 	bl	80032e0 <memmove>
 8002d54:	68a3      	ldr	r3, [r4, #8]
 8002d56:	6822      	ldr	r2, [r4, #0]
 8002d58:	1b9b      	subs	r3, r3, r6
 8002d5a:	4432      	add	r2, r6
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	60a3      	str	r3, [r4, #8]
 8002d60:	6022      	str	r2, [r4, #0]
 8002d62:	e7db      	b.n	8002d1c <__ssputs_r+0x58>
 8002d64:	462a      	mov	r2, r5
 8002d66:	f000 fb7b 	bl	8003460 <_realloc_r>
 8002d6a:	4606      	mov	r6, r0
 8002d6c:	2800      	cmp	r0, #0
 8002d6e:	d1e1      	bne.n	8002d34 <__ssputs_r+0x70>
 8002d70:	4650      	mov	r0, sl
 8002d72:	6921      	ldr	r1, [r4, #16]
 8002d74:	f000 face 	bl	8003314 <_free_r>
 8002d78:	e7c7      	b.n	8002d0a <__ssputs_r+0x46>
	...

08002d7c <_svfiprintf_r>:
 8002d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d80:	4698      	mov	r8, r3
 8002d82:	898b      	ldrh	r3, [r1, #12]
 8002d84:	4607      	mov	r7, r0
 8002d86:	061b      	lsls	r3, r3, #24
 8002d88:	460d      	mov	r5, r1
 8002d8a:	4614      	mov	r4, r2
 8002d8c:	b09d      	sub	sp, #116	; 0x74
 8002d8e:	d50e      	bpl.n	8002dae <_svfiprintf_r+0x32>
 8002d90:	690b      	ldr	r3, [r1, #16]
 8002d92:	b963      	cbnz	r3, 8002dae <_svfiprintf_r+0x32>
 8002d94:	2140      	movs	r1, #64	; 0x40
 8002d96:	f000 fb09 	bl	80033ac <_malloc_r>
 8002d9a:	6028      	str	r0, [r5, #0]
 8002d9c:	6128      	str	r0, [r5, #16]
 8002d9e:	b920      	cbnz	r0, 8002daa <_svfiprintf_r+0x2e>
 8002da0:	230c      	movs	r3, #12
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	f04f 30ff 	mov.w	r0, #4294967295
 8002da8:	e0d1      	b.n	8002f4e <_svfiprintf_r+0x1d2>
 8002daa:	2340      	movs	r3, #64	; 0x40
 8002dac:	616b      	str	r3, [r5, #20]
 8002dae:	2300      	movs	r3, #0
 8002db0:	9309      	str	r3, [sp, #36]	; 0x24
 8002db2:	2320      	movs	r3, #32
 8002db4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002db8:	2330      	movs	r3, #48	; 0x30
 8002dba:	f04f 0901 	mov.w	r9, #1
 8002dbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8002dc2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002f68 <_svfiprintf_r+0x1ec>
 8002dc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002dca:	4623      	mov	r3, r4
 8002dcc:	469a      	mov	sl, r3
 8002dce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002dd2:	b10a      	cbz	r2, 8002dd8 <_svfiprintf_r+0x5c>
 8002dd4:	2a25      	cmp	r2, #37	; 0x25
 8002dd6:	d1f9      	bne.n	8002dcc <_svfiprintf_r+0x50>
 8002dd8:	ebba 0b04 	subs.w	fp, sl, r4
 8002ddc:	d00b      	beq.n	8002df6 <_svfiprintf_r+0x7a>
 8002dde:	465b      	mov	r3, fp
 8002de0:	4622      	mov	r2, r4
 8002de2:	4629      	mov	r1, r5
 8002de4:	4638      	mov	r0, r7
 8002de6:	f7ff ff6d 	bl	8002cc4 <__ssputs_r>
 8002dea:	3001      	adds	r0, #1
 8002dec:	f000 80aa 	beq.w	8002f44 <_svfiprintf_r+0x1c8>
 8002df0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002df2:	445a      	add	r2, fp
 8002df4:	9209      	str	r2, [sp, #36]	; 0x24
 8002df6:	f89a 3000 	ldrb.w	r3, [sl]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 80a2 	beq.w	8002f44 <_svfiprintf_r+0x1c8>
 8002e00:	2300      	movs	r3, #0
 8002e02:	f04f 32ff 	mov.w	r2, #4294967295
 8002e06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e0a:	f10a 0a01 	add.w	sl, sl, #1
 8002e0e:	9304      	str	r3, [sp, #16]
 8002e10:	9307      	str	r3, [sp, #28]
 8002e12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e16:	931a      	str	r3, [sp, #104]	; 0x68
 8002e18:	4654      	mov	r4, sl
 8002e1a:	2205      	movs	r2, #5
 8002e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e20:	4851      	ldr	r0, [pc, #324]	; (8002f68 <_svfiprintf_r+0x1ec>)
 8002e22:	f000 fa41 	bl	80032a8 <memchr>
 8002e26:	9a04      	ldr	r2, [sp, #16]
 8002e28:	b9d8      	cbnz	r0, 8002e62 <_svfiprintf_r+0xe6>
 8002e2a:	06d0      	lsls	r0, r2, #27
 8002e2c:	bf44      	itt	mi
 8002e2e:	2320      	movmi	r3, #32
 8002e30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e34:	0711      	lsls	r1, r2, #28
 8002e36:	bf44      	itt	mi
 8002e38:	232b      	movmi	r3, #43	; 0x2b
 8002e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8002e42:	2b2a      	cmp	r3, #42	; 0x2a
 8002e44:	d015      	beq.n	8002e72 <_svfiprintf_r+0xf6>
 8002e46:	4654      	mov	r4, sl
 8002e48:	2000      	movs	r0, #0
 8002e4a:	f04f 0c0a 	mov.w	ip, #10
 8002e4e:	9a07      	ldr	r2, [sp, #28]
 8002e50:	4621      	mov	r1, r4
 8002e52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e56:	3b30      	subs	r3, #48	; 0x30
 8002e58:	2b09      	cmp	r3, #9
 8002e5a:	d94e      	bls.n	8002efa <_svfiprintf_r+0x17e>
 8002e5c:	b1b0      	cbz	r0, 8002e8c <_svfiprintf_r+0x110>
 8002e5e:	9207      	str	r2, [sp, #28]
 8002e60:	e014      	b.n	8002e8c <_svfiprintf_r+0x110>
 8002e62:	eba0 0308 	sub.w	r3, r0, r8
 8002e66:	fa09 f303 	lsl.w	r3, r9, r3
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	46a2      	mov	sl, r4
 8002e6e:	9304      	str	r3, [sp, #16]
 8002e70:	e7d2      	b.n	8002e18 <_svfiprintf_r+0x9c>
 8002e72:	9b03      	ldr	r3, [sp, #12]
 8002e74:	1d19      	adds	r1, r3, #4
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	9103      	str	r1, [sp, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	bfbb      	ittet	lt
 8002e7e:	425b      	neglt	r3, r3
 8002e80:	f042 0202 	orrlt.w	r2, r2, #2
 8002e84:	9307      	strge	r3, [sp, #28]
 8002e86:	9307      	strlt	r3, [sp, #28]
 8002e88:	bfb8      	it	lt
 8002e8a:	9204      	strlt	r2, [sp, #16]
 8002e8c:	7823      	ldrb	r3, [r4, #0]
 8002e8e:	2b2e      	cmp	r3, #46	; 0x2e
 8002e90:	d10c      	bne.n	8002eac <_svfiprintf_r+0x130>
 8002e92:	7863      	ldrb	r3, [r4, #1]
 8002e94:	2b2a      	cmp	r3, #42	; 0x2a
 8002e96:	d135      	bne.n	8002f04 <_svfiprintf_r+0x188>
 8002e98:	9b03      	ldr	r3, [sp, #12]
 8002e9a:	3402      	adds	r4, #2
 8002e9c:	1d1a      	adds	r2, r3, #4
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	9203      	str	r2, [sp, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	bfb8      	it	lt
 8002ea6:	f04f 33ff 	movlt.w	r3, #4294967295
 8002eaa:	9305      	str	r3, [sp, #20]
 8002eac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002f78 <_svfiprintf_r+0x1fc>
 8002eb0:	2203      	movs	r2, #3
 8002eb2:	4650      	mov	r0, sl
 8002eb4:	7821      	ldrb	r1, [r4, #0]
 8002eb6:	f000 f9f7 	bl	80032a8 <memchr>
 8002eba:	b140      	cbz	r0, 8002ece <_svfiprintf_r+0x152>
 8002ebc:	2340      	movs	r3, #64	; 0x40
 8002ebe:	eba0 000a 	sub.w	r0, r0, sl
 8002ec2:	fa03 f000 	lsl.w	r0, r3, r0
 8002ec6:	9b04      	ldr	r3, [sp, #16]
 8002ec8:	3401      	adds	r4, #1
 8002eca:	4303      	orrs	r3, r0
 8002ecc:	9304      	str	r3, [sp, #16]
 8002ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ed2:	2206      	movs	r2, #6
 8002ed4:	4825      	ldr	r0, [pc, #148]	; (8002f6c <_svfiprintf_r+0x1f0>)
 8002ed6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002eda:	f000 f9e5 	bl	80032a8 <memchr>
 8002ede:	2800      	cmp	r0, #0
 8002ee0:	d038      	beq.n	8002f54 <_svfiprintf_r+0x1d8>
 8002ee2:	4b23      	ldr	r3, [pc, #140]	; (8002f70 <_svfiprintf_r+0x1f4>)
 8002ee4:	bb1b      	cbnz	r3, 8002f2e <_svfiprintf_r+0x1b2>
 8002ee6:	9b03      	ldr	r3, [sp, #12]
 8002ee8:	3307      	adds	r3, #7
 8002eea:	f023 0307 	bic.w	r3, r3, #7
 8002eee:	3308      	adds	r3, #8
 8002ef0:	9303      	str	r3, [sp, #12]
 8002ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ef4:	4433      	add	r3, r6
 8002ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ef8:	e767      	b.n	8002dca <_svfiprintf_r+0x4e>
 8002efa:	460c      	mov	r4, r1
 8002efc:	2001      	movs	r0, #1
 8002efe:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f02:	e7a5      	b.n	8002e50 <_svfiprintf_r+0xd4>
 8002f04:	2300      	movs	r3, #0
 8002f06:	f04f 0c0a 	mov.w	ip, #10
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	3401      	adds	r4, #1
 8002f0e:	9305      	str	r3, [sp, #20]
 8002f10:	4620      	mov	r0, r4
 8002f12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f16:	3a30      	subs	r2, #48	; 0x30
 8002f18:	2a09      	cmp	r2, #9
 8002f1a:	d903      	bls.n	8002f24 <_svfiprintf_r+0x1a8>
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0c5      	beq.n	8002eac <_svfiprintf_r+0x130>
 8002f20:	9105      	str	r1, [sp, #20]
 8002f22:	e7c3      	b.n	8002eac <_svfiprintf_r+0x130>
 8002f24:	4604      	mov	r4, r0
 8002f26:	2301      	movs	r3, #1
 8002f28:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f2c:	e7f0      	b.n	8002f10 <_svfiprintf_r+0x194>
 8002f2e:	ab03      	add	r3, sp, #12
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	462a      	mov	r2, r5
 8002f34:	4638      	mov	r0, r7
 8002f36:	4b0f      	ldr	r3, [pc, #60]	; (8002f74 <_svfiprintf_r+0x1f8>)
 8002f38:	a904      	add	r1, sp, #16
 8002f3a:	f3af 8000 	nop.w
 8002f3e:	1c42      	adds	r2, r0, #1
 8002f40:	4606      	mov	r6, r0
 8002f42:	d1d6      	bne.n	8002ef2 <_svfiprintf_r+0x176>
 8002f44:	89ab      	ldrh	r3, [r5, #12]
 8002f46:	065b      	lsls	r3, r3, #25
 8002f48:	f53f af2c 	bmi.w	8002da4 <_svfiprintf_r+0x28>
 8002f4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f4e:	b01d      	add	sp, #116	; 0x74
 8002f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f54:	ab03      	add	r3, sp, #12
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	462a      	mov	r2, r5
 8002f5a:	4638      	mov	r0, r7
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <_svfiprintf_r+0x1f8>)
 8002f5e:	a904      	add	r1, sp, #16
 8002f60:	f000 f87c 	bl	800305c <_printf_i>
 8002f64:	e7eb      	b.n	8002f3e <_svfiprintf_r+0x1c2>
 8002f66:	bf00      	nop
 8002f68:	08003552 	.word	0x08003552
 8002f6c:	0800355c 	.word	0x0800355c
 8002f70:	00000000 	.word	0x00000000
 8002f74:	08002cc5 	.word	0x08002cc5
 8002f78:	08003558 	.word	0x08003558

08002f7c <_printf_common>:
 8002f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f80:	4616      	mov	r6, r2
 8002f82:	4699      	mov	r9, r3
 8002f84:	688a      	ldr	r2, [r1, #8]
 8002f86:	690b      	ldr	r3, [r1, #16]
 8002f88:	4607      	mov	r7, r0
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	bfb8      	it	lt
 8002f8e:	4613      	movlt	r3, r2
 8002f90:	6033      	str	r3, [r6, #0]
 8002f92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f96:	460c      	mov	r4, r1
 8002f98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f9c:	b10a      	cbz	r2, 8002fa2 <_printf_common+0x26>
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	6033      	str	r3, [r6, #0]
 8002fa2:	6823      	ldr	r3, [r4, #0]
 8002fa4:	0699      	lsls	r1, r3, #26
 8002fa6:	bf42      	ittt	mi
 8002fa8:	6833      	ldrmi	r3, [r6, #0]
 8002faa:	3302      	addmi	r3, #2
 8002fac:	6033      	strmi	r3, [r6, #0]
 8002fae:	6825      	ldr	r5, [r4, #0]
 8002fb0:	f015 0506 	ands.w	r5, r5, #6
 8002fb4:	d106      	bne.n	8002fc4 <_printf_common+0x48>
 8002fb6:	f104 0a19 	add.w	sl, r4, #25
 8002fba:	68e3      	ldr	r3, [r4, #12]
 8002fbc:	6832      	ldr	r2, [r6, #0]
 8002fbe:	1a9b      	subs	r3, r3, r2
 8002fc0:	42ab      	cmp	r3, r5
 8002fc2:	dc28      	bgt.n	8003016 <_printf_common+0x9a>
 8002fc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002fc8:	1e13      	subs	r3, r2, #0
 8002fca:	6822      	ldr	r2, [r4, #0]
 8002fcc:	bf18      	it	ne
 8002fce:	2301      	movne	r3, #1
 8002fd0:	0692      	lsls	r2, r2, #26
 8002fd2:	d42d      	bmi.n	8003030 <_printf_common+0xb4>
 8002fd4:	4649      	mov	r1, r9
 8002fd6:	4638      	mov	r0, r7
 8002fd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fdc:	47c0      	blx	r8
 8002fde:	3001      	adds	r0, #1
 8002fe0:	d020      	beq.n	8003024 <_printf_common+0xa8>
 8002fe2:	6823      	ldr	r3, [r4, #0]
 8002fe4:	68e5      	ldr	r5, [r4, #12]
 8002fe6:	f003 0306 	and.w	r3, r3, #6
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	bf18      	it	ne
 8002fee:	2500      	movne	r5, #0
 8002ff0:	6832      	ldr	r2, [r6, #0]
 8002ff2:	f04f 0600 	mov.w	r6, #0
 8002ff6:	68a3      	ldr	r3, [r4, #8]
 8002ff8:	bf08      	it	eq
 8002ffa:	1aad      	subeq	r5, r5, r2
 8002ffc:	6922      	ldr	r2, [r4, #16]
 8002ffe:	bf08      	it	eq
 8003000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003004:	4293      	cmp	r3, r2
 8003006:	bfc4      	itt	gt
 8003008:	1a9b      	subgt	r3, r3, r2
 800300a:	18ed      	addgt	r5, r5, r3
 800300c:	341a      	adds	r4, #26
 800300e:	42b5      	cmp	r5, r6
 8003010:	d11a      	bne.n	8003048 <_printf_common+0xcc>
 8003012:	2000      	movs	r0, #0
 8003014:	e008      	b.n	8003028 <_printf_common+0xac>
 8003016:	2301      	movs	r3, #1
 8003018:	4652      	mov	r2, sl
 800301a:	4649      	mov	r1, r9
 800301c:	4638      	mov	r0, r7
 800301e:	47c0      	blx	r8
 8003020:	3001      	adds	r0, #1
 8003022:	d103      	bne.n	800302c <_printf_common+0xb0>
 8003024:	f04f 30ff 	mov.w	r0, #4294967295
 8003028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800302c:	3501      	adds	r5, #1
 800302e:	e7c4      	b.n	8002fba <_printf_common+0x3e>
 8003030:	2030      	movs	r0, #48	; 0x30
 8003032:	18e1      	adds	r1, r4, r3
 8003034:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800303e:	4422      	add	r2, r4
 8003040:	3302      	adds	r3, #2
 8003042:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003046:	e7c5      	b.n	8002fd4 <_printf_common+0x58>
 8003048:	2301      	movs	r3, #1
 800304a:	4622      	mov	r2, r4
 800304c:	4649      	mov	r1, r9
 800304e:	4638      	mov	r0, r7
 8003050:	47c0      	blx	r8
 8003052:	3001      	adds	r0, #1
 8003054:	d0e6      	beq.n	8003024 <_printf_common+0xa8>
 8003056:	3601      	adds	r6, #1
 8003058:	e7d9      	b.n	800300e <_printf_common+0x92>
	...

0800305c <_printf_i>:
 800305c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003060:	460c      	mov	r4, r1
 8003062:	7e27      	ldrb	r7, [r4, #24]
 8003064:	4691      	mov	r9, r2
 8003066:	2f78      	cmp	r7, #120	; 0x78
 8003068:	4680      	mov	r8, r0
 800306a:	469a      	mov	sl, r3
 800306c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800306e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003072:	d807      	bhi.n	8003084 <_printf_i+0x28>
 8003074:	2f62      	cmp	r7, #98	; 0x62
 8003076:	d80a      	bhi.n	800308e <_printf_i+0x32>
 8003078:	2f00      	cmp	r7, #0
 800307a:	f000 80d9 	beq.w	8003230 <_printf_i+0x1d4>
 800307e:	2f58      	cmp	r7, #88	; 0x58
 8003080:	f000 80a4 	beq.w	80031cc <_printf_i+0x170>
 8003084:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003088:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800308c:	e03a      	b.n	8003104 <_printf_i+0xa8>
 800308e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003092:	2b15      	cmp	r3, #21
 8003094:	d8f6      	bhi.n	8003084 <_printf_i+0x28>
 8003096:	a001      	add	r0, pc, #4	; (adr r0, 800309c <_printf_i+0x40>)
 8003098:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800309c:	080030f5 	.word	0x080030f5
 80030a0:	08003109 	.word	0x08003109
 80030a4:	08003085 	.word	0x08003085
 80030a8:	08003085 	.word	0x08003085
 80030ac:	08003085 	.word	0x08003085
 80030b0:	08003085 	.word	0x08003085
 80030b4:	08003109 	.word	0x08003109
 80030b8:	08003085 	.word	0x08003085
 80030bc:	08003085 	.word	0x08003085
 80030c0:	08003085 	.word	0x08003085
 80030c4:	08003085 	.word	0x08003085
 80030c8:	08003217 	.word	0x08003217
 80030cc:	08003139 	.word	0x08003139
 80030d0:	080031f9 	.word	0x080031f9
 80030d4:	08003085 	.word	0x08003085
 80030d8:	08003085 	.word	0x08003085
 80030dc:	08003239 	.word	0x08003239
 80030e0:	08003085 	.word	0x08003085
 80030e4:	08003139 	.word	0x08003139
 80030e8:	08003085 	.word	0x08003085
 80030ec:	08003085 	.word	0x08003085
 80030f0:	08003201 	.word	0x08003201
 80030f4:	680b      	ldr	r3, [r1, #0]
 80030f6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80030fa:	1d1a      	adds	r2, r3, #4
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	600a      	str	r2, [r1, #0]
 8003100:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003104:	2301      	movs	r3, #1
 8003106:	e0a4      	b.n	8003252 <_printf_i+0x1f6>
 8003108:	6825      	ldr	r5, [r4, #0]
 800310a:	6808      	ldr	r0, [r1, #0]
 800310c:	062e      	lsls	r6, r5, #24
 800310e:	f100 0304 	add.w	r3, r0, #4
 8003112:	d50a      	bpl.n	800312a <_printf_i+0xce>
 8003114:	6805      	ldr	r5, [r0, #0]
 8003116:	600b      	str	r3, [r1, #0]
 8003118:	2d00      	cmp	r5, #0
 800311a:	da03      	bge.n	8003124 <_printf_i+0xc8>
 800311c:	232d      	movs	r3, #45	; 0x2d
 800311e:	426d      	negs	r5, r5
 8003120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003124:	230a      	movs	r3, #10
 8003126:	485e      	ldr	r0, [pc, #376]	; (80032a0 <_printf_i+0x244>)
 8003128:	e019      	b.n	800315e <_printf_i+0x102>
 800312a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800312e:	6805      	ldr	r5, [r0, #0]
 8003130:	600b      	str	r3, [r1, #0]
 8003132:	bf18      	it	ne
 8003134:	b22d      	sxthne	r5, r5
 8003136:	e7ef      	b.n	8003118 <_printf_i+0xbc>
 8003138:	680b      	ldr	r3, [r1, #0]
 800313a:	6825      	ldr	r5, [r4, #0]
 800313c:	1d18      	adds	r0, r3, #4
 800313e:	6008      	str	r0, [r1, #0]
 8003140:	0628      	lsls	r0, r5, #24
 8003142:	d501      	bpl.n	8003148 <_printf_i+0xec>
 8003144:	681d      	ldr	r5, [r3, #0]
 8003146:	e002      	b.n	800314e <_printf_i+0xf2>
 8003148:	0669      	lsls	r1, r5, #25
 800314a:	d5fb      	bpl.n	8003144 <_printf_i+0xe8>
 800314c:	881d      	ldrh	r5, [r3, #0]
 800314e:	2f6f      	cmp	r7, #111	; 0x6f
 8003150:	bf0c      	ite	eq
 8003152:	2308      	moveq	r3, #8
 8003154:	230a      	movne	r3, #10
 8003156:	4852      	ldr	r0, [pc, #328]	; (80032a0 <_printf_i+0x244>)
 8003158:	2100      	movs	r1, #0
 800315a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800315e:	6866      	ldr	r6, [r4, #4]
 8003160:	2e00      	cmp	r6, #0
 8003162:	bfa8      	it	ge
 8003164:	6821      	ldrge	r1, [r4, #0]
 8003166:	60a6      	str	r6, [r4, #8]
 8003168:	bfa4      	itt	ge
 800316a:	f021 0104 	bicge.w	r1, r1, #4
 800316e:	6021      	strge	r1, [r4, #0]
 8003170:	b90d      	cbnz	r5, 8003176 <_printf_i+0x11a>
 8003172:	2e00      	cmp	r6, #0
 8003174:	d04d      	beq.n	8003212 <_printf_i+0x1b6>
 8003176:	4616      	mov	r6, r2
 8003178:	fbb5 f1f3 	udiv	r1, r5, r3
 800317c:	fb03 5711 	mls	r7, r3, r1, r5
 8003180:	5dc7      	ldrb	r7, [r0, r7]
 8003182:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003186:	462f      	mov	r7, r5
 8003188:	42bb      	cmp	r3, r7
 800318a:	460d      	mov	r5, r1
 800318c:	d9f4      	bls.n	8003178 <_printf_i+0x11c>
 800318e:	2b08      	cmp	r3, #8
 8003190:	d10b      	bne.n	80031aa <_printf_i+0x14e>
 8003192:	6823      	ldr	r3, [r4, #0]
 8003194:	07df      	lsls	r7, r3, #31
 8003196:	d508      	bpl.n	80031aa <_printf_i+0x14e>
 8003198:	6923      	ldr	r3, [r4, #16]
 800319a:	6861      	ldr	r1, [r4, #4]
 800319c:	4299      	cmp	r1, r3
 800319e:	bfde      	ittt	le
 80031a0:	2330      	movle	r3, #48	; 0x30
 80031a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80031a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80031aa:	1b92      	subs	r2, r2, r6
 80031ac:	6122      	str	r2, [r4, #16]
 80031ae:	464b      	mov	r3, r9
 80031b0:	4621      	mov	r1, r4
 80031b2:	4640      	mov	r0, r8
 80031b4:	f8cd a000 	str.w	sl, [sp]
 80031b8:	aa03      	add	r2, sp, #12
 80031ba:	f7ff fedf 	bl	8002f7c <_printf_common>
 80031be:	3001      	adds	r0, #1
 80031c0:	d14c      	bne.n	800325c <_printf_i+0x200>
 80031c2:	f04f 30ff 	mov.w	r0, #4294967295
 80031c6:	b004      	add	sp, #16
 80031c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031cc:	4834      	ldr	r0, [pc, #208]	; (80032a0 <_printf_i+0x244>)
 80031ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80031d2:	680e      	ldr	r6, [r1, #0]
 80031d4:	6823      	ldr	r3, [r4, #0]
 80031d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80031da:	061f      	lsls	r7, r3, #24
 80031dc:	600e      	str	r6, [r1, #0]
 80031de:	d514      	bpl.n	800320a <_printf_i+0x1ae>
 80031e0:	07d9      	lsls	r1, r3, #31
 80031e2:	bf44      	itt	mi
 80031e4:	f043 0320 	orrmi.w	r3, r3, #32
 80031e8:	6023      	strmi	r3, [r4, #0]
 80031ea:	b91d      	cbnz	r5, 80031f4 <_printf_i+0x198>
 80031ec:	6823      	ldr	r3, [r4, #0]
 80031ee:	f023 0320 	bic.w	r3, r3, #32
 80031f2:	6023      	str	r3, [r4, #0]
 80031f4:	2310      	movs	r3, #16
 80031f6:	e7af      	b.n	8003158 <_printf_i+0xfc>
 80031f8:	6823      	ldr	r3, [r4, #0]
 80031fa:	f043 0320 	orr.w	r3, r3, #32
 80031fe:	6023      	str	r3, [r4, #0]
 8003200:	2378      	movs	r3, #120	; 0x78
 8003202:	4828      	ldr	r0, [pc, #160]	; (80032a4 <_printf_i+0x248>)
 8003204:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003208:	e7e3      	b.n	80031d2 <_printf_i+0x176>
 800320a:	065e      	lsls	r6, r3, #25
 800320c:	bf48      	it	mi
 800320e:	b2ad      	uxthmi	r5, r5
 8003210:	e7e6      	b.n	80031e0 <_printf_i+0x184>
 8003212:	4616      	mov	r6, r2
 8003214:	e7bb      	b.n	800318e <_printf_i+0x132>
 8003216:	680b      	ldr	r3, [r1, #0]
 8003218:	6826      	ldr	r6, [r4, #0]
 800321a:	1d1d      	adds	r5, r3, #4
 800321c:	6960      	ldr	r0, [r4, #20]
 800321e:	600d      	str	r5, [r1, #0]
 8003220:	0635      	lsls	r5, r6, #24
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	d501      	bpl.n	800322a <_printf_i+0x1ce>
 8003226:	6018      	str	r0, [r3, #0]
 8003228:	e002      	b.n	8003230 <_printf_i+0x1d4>
 800322a:	0671      	lsls	r1, r6, #25
 800322c:	d5fb      	bpl.n	8003226 <_printf_i+0x1ca>
 800322e:	8018      	strh	r0, [r3, #0]
 8003230:	2300      	movs	r3, #0
 8003232:	4616      	mov	r6, r2
 8003234:	6123      	str	r3, [r4, #16]
 8003236:	e7ba      	b.n	80031ae <_printf_i+0x152>
 8003238:	680b      	ldr	r3, [r1, #0]
 800323a:	1d1a      	adds	r2, r3, #4
 800323c:	600a      	str	r2, [r1, #0]
 800323e:	681e      	ldr	r6, [r3, #0]
 8003240:	2100      	movs	r1, #0
 8003242:	4630      	mov	r0, r6
 8003244:	6862      	ldr	r2, [r4, #4]
 8003246:	f000 f82f 	bl	80032a8 <memchr>
 800324a:	b108      	cbz	r0, 8003250 <_printf_i+0x1f4>
 800324c:	1b80      	subs	r0, r0, r6
 800324e:	6060      	str	r0, [r4, #4]
 8003250:	6863      	ldr	r3, [r4, #4]
 8003252:	6123      	str	r3, [r4, #16]
 8003254:	2300      	movs	r3, #0
 8003256:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800325a:	e7a8      	b.n	80031ae <_printf_i+0x152>
 800325c:	4632      	mov	r2, r6
 800325e:	4649      	mov	r1, r9
 8003260:	4640      	mov	r0, r8
 8003262:	6923      	ldr	r3, [r4, #16]
 8003264:	47d0      	blx	sl
 8003266:	3001      	adds	r0, #1
 8003268:	d0ab      	beq.n	80031c2 <_printf_i+0x166>
 800326a:	6823      	ldr	r3, [r4, #0]
 800326c:	079b      	lsls	r3, r3, #30
 800326e:	d413      	bmi.n	8003298 <_printf_i+0x23c>
 8003270:	68e0      	ldr	r0, [r4, #12]
 8003272:	9b03      	ldr	r3, [sp, #12]
 8003274:	4298      	cmp	r0, r3
 8003276:	bfb8      	it	lt
 8003278:	4618      	movlt	r0, r3
 800327a:	e7a4      	b.n	80031c6 <_printf_i+0x16a>
 800327c:	2301      	movs	r3, #1
 800327e:	4632      	mov	r2, r6
 8003280:	4649      	mov	r1, r9
 8003282:	4640      	mov	r0, r8
 8003284:	47d0      	blx	sl
 8003286:	3001      	adds	r0, #1
 8003288:	d09b      	beq.n	80031c2 <_printf_i+0x166>
 800328a:	3501      	adds	r5, #1
 800328c:	68e3      	ldr	r3, [r4, #12]
 800328e:	9903      	ldr	r1, [sp, #12]
 8003290:	1a5b      	subs	r3, r3, r1
 8003292:	42ab      	cmp	r3, r5
 8003294:	dcf2      	bgt.n	800327c <_printf_i+0x220>
 8003296:	e7eb      	b.n	8003270 <_printf_i+0x214>
 8003298:	2500      	movs	r5, #0
 800329a:	f104 0619 	add.w	r6, r4, #25
 800329e:	e7f5      	b.n	800328c <_printf_i+0x230>
 80032a0:	08003563 	.word	0x08003563
 80032a4:	08003574 	.word	0x08003574

080032a8 <memchr>:
 80032a8:	4603      	mov	r3, r0
 80032aa:	b510      	push	{r4, lr}
 80032ac:	b2c9      	uxtb	r1, r1
 80032ae:	4402      	add	r2, r0
 80032b0:	4293      	cmp	r3, r2
 80032b2:	4618      	mov	r0, r3
 80032b4:	d101      	bne.n	80032ba <memchr+0x12>
 80032b6:	2000      	movs	r0, #0
 80032b8:	e003      	b.n	80032c2 <memchr+0x1a>
 80032ba:	7804      	ldrb	r4, [r0, #0]
 80032bc:	3301      	adds	r3, #1
 80032be:	428c      	cmp	r4, r1
 80032c0:	d1f6      	bne.n	80032b0 <memchr+0x8>
 80032c2:	bd10      	pop	{r4, pc}

080032c4 <memcpy>:
 80032c4:	440a      	add	r2, r1
 80032c6:	4291      	cmp	r1, r2
 80032c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80032cc:	d100      	bne.n	80032d0 <memcpy+0xc>
 80032ce:	4770      	bx	lr
 80032d0:	b510      	push	{r4, lr}
 80032d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032d6:	4291      	cmp	r1, r2
 80032d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032dc:	d1f9      	bne.n	80032d2 <memcpy+0xe>
 80032de:	bd10      	pop	{r4, pc}

080032e0 <memmove>:
 80032e0:	4288      	cmp	r0, r1
 80032e2:	b510      	push	{r4, lr}
 80032e4:	eb01 0402 	add.w	r4, r1, r2
 80032e8:	d902      	bls.n	80032f0 <memmove+0x10>
 80032ea:	4284      	cmp	r4, r0
 80032ec:	4623      	mov	r3, r4
 80032ee:	d807      	bhi.n	8003300 <memmove+0x20>
 80032f0:	1e43      	subs	r3, r0, #1
 80032f2:	42a1      	cmp	r1, r4
 80032f4:	d008      	beq.n	8003308 <memmove+0x28>
 80032f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80032fe:	e7f8      	b.n	80032f2 <memmove+0x12>
 8003300:	4601      	mov	r1, r0
 8003302:	4402      	add	r2, r0
 8003304:	428a      	cmp	r2, r1
 8003306:	d100      	bne.n	800330a <memmove+0x2a>
 8003308:	bd10      	pop	{r4, pc}
 800330a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800330e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003312:	e7f7      	b.n	8003304 <memmove+0x24>

08003314 <_free_r>:
 8003314:	b538      	push	{r3, r4, r5, lr}
 8003316:	4605      	mov	r5, r0
 8003318:	2900      	cmp	r1, #0
 800331a:	d043      	beq.n	80033a4 <_free_r+0x90>
 800331c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003320:	1f0c      	subs	r4, r1, #4
 8003322:	2b00      	cmp	r3, #0
 8003324:	bfb8      	it	lt
 8003326:	18e4      	addlt	r4, r4, r3
 8003328:	f000 f8d0 	bl	80034cc <__malloc_lock>
 800332c:	4a1e      	ldr	r2, [pc, #120]	; (80033a8 <_free_r+0x94>)
 800332e:	6813      	ldr	r3, [r2, #0]
 8003330:	4610      	mov	r0, r2
 8003332:	b933      	cbnz	r3, 8003342 <_free_r+0x2e>
 8003334:	6063      	str	r3, [r4, #4]
 8003336:	6014      	str	r4, [r2, #0]
 8003338:	4628      	mov	r0, r5
 800333a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800333e:	f000 b8cb 	b.w	80034d8 <__malloc_unlock>
 8003342:	42a3      	cmp	r3, r4
 8003344:	d90a      	bls.n	800335c <_free_r+0x48>
 8003346:	6821      	ldr	r1, [r4, #0]
 8003348:	1862      	adds	r2, r4, r1
 800334a:	4293      	cmp	r3, r2
 800334c:	bf01      	itttt	eq
 800334e:	681a      	ldreq	r2, [r3, #0]
 8003350:	685b      	ldreq	r3, [r3, #4]
 8003352:	1852      	addeq	r2, r2, r1
 8003354:	6022      	streq	r2, [r4, #0]
 8003356:	6063      	str	r3, [r4, #4]
 8003358:	6004      	str	r4, [r0, #0]
 800335a:	e7ed      	b.n	8003338 <_free_r+0x24>
 800335c:	461a      	mov	r2, r3
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	b10b      	cbz	r3, 8003366 <_free_r+0x52>
 8003362:	42a3      	cmp	r3, r4
 8003364:	d9fa      	bls.n	800335c <_free_r+0x48>
 8003366:	6811      	ldr	r1, [r2, #0]
 8003368:	1850      	adds	r0, r2, r1
 800336a:	42a0      	cmp	r0, r4
 800336c:	d10b      	bne.n	8003386 <_free_r+0x72>
 800336e:	6820      	ldr	r0, [r4, #0]
 8003370:	4401      	add	r1, r0
 8003372:	1850      	adds	r0, r2, r1
 8003374:	4283      	cmp	r3, r0
 8003376:	6011      	str	r1, [r2, #0]
 8003378:	d1de      	bne.n	8003338 <_free_r+0x24>
 800337a:	6818      	ldr	r0, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	4401      	add	r1, r0
 8003380:	6011      	str	r1, [r2, #0]
 8003382:	6053      	str	r3, [r2, #4]
 8003384:	e7d8      	b.n	8003338 <_free_r+0x24>
 8003386:	d902      	bls.n	800338e <_free_r+0x7a>
 8003388:	230c      	movs	r3, #12
 800338a:	602b      	str	r3, [r5, #0]
 800338c:	e7d4      	b.n	8003338 <_free_r+0x24>
 800338e:	6820      	ldr	r0, [r4, #0]
 8003390:	1821      	adds	r1, r4, r0
 8003392:	428b      	cmp	r3, r1
 8003394:	bf01      	itttt	eq
 8003396:	6819      	ldreq	r1, [r3, #0]
 8003398:	685b      	ldreq	r3, [r3, #4]
 800339a:	1809      	addeq	r1, r1, r0
 800339c:	6021      	streq	r1, [r4, #0]
 800339e:	6063      	str	r3, [r4, #4]
 80033a0:	6054      	str	r4, [r2, #4]
 80033a2:	e7c9      	b.n	8003338 <_free_r+0x24>
 80033a4:	bd38      	pop	{r3, r4, r5, pc}
 80033a6:	bf00      	nop
 80033a8:	200000a4 	.word	0x200000a4

080033ac <_malloc_r>:
 80033ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ae:	1ccd      	adds	r5, r1, #3
 80033b0:	f025 0503 	bic.w	r5, r5, #3
 80033b4:	3508      	adds	r5, #8
 80033b6:	2d0c      	cmp	r5, #12
 80033b8:	bf38      	it	cc
 80033ba:	250c      	movcc	r5, #12
 80033bc:	2d00      	cmp	r5, #0
 80033be:	4606      	mov	r6, r0
 80033c0:	db01      	blt.n	80033c6 <_malloc_r+0x1a>
 80033c2:	42a9      	cmp	r1, r5
 80033c4:	d903      	bls.n	80033ce <_malloc_r+0x22>
 80033c6:	230c      	movs	r3, #12
 80033c8:	6033      	str	r3, [r6, #0]
 80033ca:	2000      	movs	r0, #0
 80033cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ce:	f000 f87d 	bl	80034cc <__malloc_lock>
 80033d2:	4921      	ldr	r1, [pc, #132]	; (8003458 <_malloc_r+0xac>)
 80033d4:	680a      	ldr	r2, [r1, #0]
 80033d6:	4614      	mov	r4, r2
 80033d8:	b99c      	cbnz	r4, 8003402 <_malloc_r+0x56>
 80033da:	4f20      	ldr	r7, [pc, #128]	; (800345c <_malloc_r+0xb0>)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	b923      	cbnz	r3, 80033ea <_malloc_r+0x3e>
 80033e0:	4621      	mov	r1, r4
 80033e2:	4630      	mov	r0, r6
 80033e4:	f000 f862 	bl	80034ac <_sbrk_r>
 80033e8:	6038      	str	r0, [r7, #0]
 80033ea:	4629      	mov	r1, r5
 80033ec:	4630      	mov	r0, r6
 80033ee:	f000 f85d 	bl	80034ac <_sbrk_r>
 80033f2:	1c43      	adds	r3, r0, #1
 80033f4:	d123      	bne.n	800343e <_malloc_r+0x92>
 80033f6:	230c      	movs	r3, #12
 80033f8:	4630      	mov	r0, r6
 80033fa:	6033      	str	r3, [r6, #0]
 80033fc:	f000 f86c 	bl	80034d8 <__malloc_unlock>
 8003400:	e7e3      	b.n	80033ca <_malloc_r+0x1e>
 8003402:	6823      	ldr	r3, [r4, #0]
 8003404:	1b5b      	subs	r3, r3, r5
 8003406:	d417      	bmi.n	8003438 <_malloc_r+0x8c>
 8003408:	2b0b      	cmp	r3, #11
 800340a:	d903      	bls.n	8003414 <_malloc_r+0x68>
 800340c:	6023      	str	r3, [r4, #0]
 800340e:	441c      	add	r4, r3
 8003410:	6025      	str	r5, [r4, #0]
 8003412:	e004      	b.n	800341e <_malloc_r+0x72>
 8003414:	6863      	ldr	r3, [r4, #4]
 8003416:	42a2      	cmp	r2, r4
 8003418:	bf0c      	ite	eq
 800341a:	600b      	streq	r3, [r1, #0]
 800341c:	6053      	strne	r3, [r2, #4]
 800341e:	4630      	mov	r0, r6
 8003420:	f000 f85a 	bl	80034d8 <__malloc_unlock>
 8003424:	f104 000b 	add.w	r0, r4, #11
 8003428:	1d23      	adds	r3, r4, #4
 800342a:	f020 0007 	bic.w	r0, r0, #7
 800342e:	1ac2      	subs	r2, r0, r3
 8003430:	d0cc      	beq.n	80033cc <_malloc_r+0x20>
 8003432:	1a1b      	subs	r3, r3, r0
 8003434:	50a3      	str	r3, [r4, r2]
 8003436:	e7c9      	b.n	80033cc <_malloc_r+0x20>
 8003438:	4622      	mov	r2, r4
 800343a:	6864      	ldr	r4, [r4, #4]
 800343c:	e7cc      	b.n	80033d8 <_malloc_r+0x2c>
 800343e:	1cc4      	adds	r4, r0, #3
 8003440:	f024 0403 	bic.w	r4, r4, #3
 8003444:	42a0      	cmp	r0, r4
 8003446:	d0e3      	beq.n	8003410 <_malloc_r+0x64>
 8003448:	1a21      	subs	r1, r4, r0
 800344a:	4630      	mov	r0, r6
 800344c:	f000 f82e 	bl	80034ac <_sbrk_r>
 8003450:	3001      	adds	r0, #1
 8003452:	d1dd      	bne.n	8003410 <_malloc_r+0x64>
 8003454:	e7cf      	b.n	80033f6 <_malloc_r+0x4a>
 8003456:	bf00      	nop
 8003458:	200000a4 	.word	0x200000a4
 800345c:	200000a8 	.word	0x200000a8

08003460 <_realloc_r>:
 8003460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003462:	4607      	mov	r7, r0
 8003464:	4614      	mov	r4, r2
 8003466:	460e      	mov	r6, r1
 8003468:	b921      	cbnz	r1, 8003474 <_realloc_r+0x14>
 800346a:	4611      	mov	r1, r2
 800346c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003470:	f7ff bf9c 	b.w	80033ac <_malloc_r>
 8003474:	b922      	cbnz	r2, 8003480 <_realloc_r+0x20>
 8003476:	f7ff ff4d 	bl	8003314 <_free_r>
 800347a:	4625      	mov	r5, r4
 800347c:	4628      	mov	r0, r5
 800347e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003480:	f000 f830 	bl	80034e4 <_malloc_usable_size_r>
 8003484:	42a0      	cmp	r0, r4
 8003486:	d20f      	bcs.n	80034a8 <_realloc_r+0x48>
 8003488:	4621      	mov	r1, r4
 800348a:	4638      	mov	r0, r7
 800348c:	f7ff ff8e 	bl	80033ac <_malloc_r>
 8003490:	4605      	mov	r5, r0
 8003492:	2800      	cmp	r0, #0
 8003494:	d0f2      	beq.n	800347c <_realloc_r+0x1c>
 8003496:	4631      	mov	r1, r6
 8003498:	4622      	mov	r2, r4
 800349a:	f7ff ff13 	bl	80032c4 <memcpy>
 800349e:	4631      	mov	r1, r6
 80034a0:	4638      	mov	r0, r7
 80034a2:	f7ff ff37 	bl	8003314 <_free_r>
 80034a6:	e7e9      	b.n	800347c <_realloc_r+0x1c>
 80034a8:	4635      	mov	r5, r6
 80034aa:	e7e7      	b.n	800347c <_realloc_r+0x1c>

080034ac <_sbrk_r>:
 80034ac:	b538      	push	{r3, r4, r5, lr}
 80034ae:	2300      	movs	r3, #0
 80034b0:	4d05      	ldr	r5, [pc, #20]	; (80034c8 <_sbrk_r+0x1c>)
 80034b2:	4604      	mov	r4, r0
 80034b4:	4608      	mov	r0, r1
 80034b6:	602b      	str	r3, [r5, #0]
 80034b8:	f7fd fa2c 	bl	8000914 <_sbrk>
 80034bc:	1c43      	adds	r3, r0, #1
 80034be:	d102      	bne.n	80034c6 <_sbrk_r+0x1a>
 80034c0:	682b      	ldr	r3, [r5, #0]
 80034c2:	b103      	cbz	r3, 80034c6 <_sbrk_r+0x1a>
 80034c4:	6023      	str	r3, [r4, #0]
 80034c6:	bd38      	pop	{r3, r4, r5, pc}
 80034c8:	2000015c 	.word	0x2000015c

080034cc <__malloc_lock>:
 80034cc:	4801      	ldr	r0, [pc, #4]	; (80034d4 <__malloc_lock+0x8>)
 80034ce:	f000 b811 	b.w	80034f4 <__retarget_lock_acquire_recursive>
 80034d2:	bf00      	nop
 80034d4:	20000164 	.word	0x20000164

080034d8 <__malloc_unlock>:
 80034d8:	4801      	ldr	r0, [pc, #4]	; (80034e0 <__malloc_unlock+0x8>)
 80034da:	f000 b80c 	b.w	80034f6 <__retarget_lock_release_recursive>
 80034de:	bf00      	nop
 80034e0:	20000164 	.word	0x20000164

080034e4 <_malloc_usable_size_r>:
 80034e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034e8:	1f18      	subs	r0, r3, #4
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	bfbc      	itt	lt
 80034ee:	580b      	ldrlt	r3, [r1, r0]
 80034f0:	18c0      	addlt	r0, r0, r3
 80034f2:	4770      	bx	lr

080034f4 <__retarget_lock_acquire_recursive>:
 80034f4:	4770      	bx	lr

080034f6 <__retarget_lock_release_recursive>:
 80034f6:	4770      	bx	lr

080034f8 <_init>:
 80034f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fa:	bf00      	nop
 80034fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034fe:	bc08      	pop	{r3}
 8003500:	469e      	mov	lr, r3
 8003502:	4770      	bx	lr

08003504 <_fini>:
 8003504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003506:	bf00      	nop
 8003508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800350a:	bc08      	pop	{r3}
 800350c:	469e      	mov	lr, r3
 800350e:	4770      	bx	lr
